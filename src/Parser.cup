import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right, null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

:};

// Do something with ILLEGAL_CHARARCTER or drop it.
terminal INTEGER, IDENTIFIER, EQUAL, SEMICOL, PLUS, MINUS, MULT, DIV, INT, FLOAT, BOOL, TOP, RAT, CHAR, POW, DICT;
terminal LPAREN, RPAREN;
terminal BADCHAR;

nonterminal statements, statement, top_level, type_level;
nonterminal top_bind, full_exp, simple_exp, operator, integral_type, numeric_type, floating_point_type, type_bind, primitive_type;

precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence right POW;

top_level ::= statements:ss {:
                if(debug()) System.out.println((Node)ss);
              :}
            ;

type_level ::= statements:ss {:
                if(debug()) System.out.println((Node)ss);;
:};

statements ::= statements:ss statement:s {:
                  Node n = (Node)ss;
                  n.addChild((Node)s);
                  RESULT = n;
               :}
             | /* empty */ {:
                  RESULT = new Node("Statements");
               :}
             ;

statement ::= type_bind:s {:
                RESULT = (Node)s;
              :}
            | top_bind:s {:
                RESULT = (Node)s;
              :}
            | full_exp:s {:
                RESULT = (Node)s;
              :}
            ;

full_exp ::= simple_exp:e SEMICOL {: RESULT = (Node)e; :};

simple_exp ::= INTEGER:i    {: RESULT = new Node(i); :}
             | IDENTIFIER:i {: RESULT = new Node(i); :}
             | simple_exp:e1 operator:o simple_exp:e2 {:
                  Node n = (Node)o;
                  n.addChild((Node)e1);
                  n.addChild((Node)e2);
                  RESULT = n;
               :}
             | LPAREN simple_exp:e RPAREN {:
                 Node n = new Node("parens");
                 n.addChild(new Node("("));
                 n.addChild((Node)e);
                 n.addChild(new Node(")"));
                 RESULT = (Node)e;
               :}
             ;

primitive_type ::= numeric_type
               |   BOOL:n {:RESULT = new Node(n);:};

numeric_type ::= integral_type
               | floating_point_type;

integral_type ::= INT:n {: RESULT = new Node(n); :}
               |  CHAR:n {: RESULT = new Node(n); :}
;

floating_point_type ::= FLOAT:n {: RESULT = new Node(n);:}
               |        RAT:n {: RESULT = new Node(n); :};

operator ::= PLUS  {: RESULT = new Node("+"); :}
           | MINUS {: RESULT = new Node("-"); :}
           | MULT  {: RESULT = new Node("*"); :}
           | DIV   {: RESULT = new Node("/"); :}
           | POW   {: RESULT = new Node("^"); :}
           ;

//let_bind ::= LET IDENTIFIER:i EQUAL full_exp:e {:
//               Node n = new Node("INT");
//               n.addChild(new Node(i));
//               n.addChild((Node)e);
//               RESULT = n;
//             :};

top_bind ::= TOP IDENTIFIER:i EQUAL full_exp:e {:
                 Node n = new Node("TOP");
                 n.addChild(new Node(i));
                 n.addChild((Node)e);
                 RESULT = n;

               :};

type_bind ::= primitive_type:t IDENTIFIER:i EQUAL full_exp:e {:
                 Node n = new Node(t);
                 n.addChild(new Node(i));
                 n.addChild((Node)e);
                 RESULT = n;

               :};
