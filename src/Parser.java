
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\014\004\000\002\002\004\000\002\014" +
    "\003\000\002\011\007\000\002\011\014\000\002\011\007" +
    "\000\002\011\011\000\002\011\012\000\002\012\007\000" +
    "\002\013\003\000\002\013\002\000\002\002\005\000\002" +
    "\002\011\000\002\002\013\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\006\007\000\002\006\012" +
    "\000\002\006\014\000\002\006\005\000\002\006\007\000" +
    "\002\006\005\000\002\006\011\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\003\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\002" +
    "\000\002\007\006\000\002\007\010\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\007\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\003\000\002\032" +
    "\010\000\002\026\005\000\002\025\005\000\002\025\003" +
    "\000\002\025\002\000\002\024\005\000\002\024\004\000" +
    "\002\024\007\000\002\044\005\000\002\044\003\000\002" +
    "\046\003\000\002\043\005\000\002\043\003\000\002\043" +
    "\002\000\002\037\005\000\002\037\003\000\002\037\002" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\036\003\000\002\036\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\027\005\000\002\033\005\000" +
    "\002\033\007\000\002\033\006\000\002\033\005\000\002" +
    "\033\003\000\002\033\002\000\002\035\010\000\002\035" +
    "\006\000\002\035\003\000\002\035\003\000\002\042\003" +
    "\000\002\042\005\000\002\042\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\023\003" +
    "\000\002\023\003\000\002\017\003\000\002\017\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\003\000\002" +
    "\022\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\006\100\007\101\004\001\002\000\004\005" +
    "\302\001\002\000\010\002\300\100\007\101\004\001\002" +
    "\000\004\050\264\001\002\000\004\050\011\001\002\000" +
    "\010\002\uffff\100\uffff\101\uffff\001\002\000\020\005\022" +
    "\032\ufff7\042\014\045\021\065\016\070\023\076\012\001" +
    "\002\000\016\005\022\042\014\045\021\065\016\070\023" +
    "\076\012\001\002\000\004\007\261\001\002\000\024\005" +
    "\034\023\032\046\037\057\041\060\027\061\042\062\031" +
    "\063\030\064\033\001\002\000\016\005\022\032\ufff8\042" +
    "\014\045\021\051\246\070\023\001\002\000\004\046\177" +
    "\001\002\000\004\032\167\001\002\000\024\005\ufff2\032" +
    "\ufff2\042\ufff2\045\ufff2\051\ufff2\066\ufff2\067\ufff2\070\ufff2" +
    "\077\ufff2\001\002\000\022\005\165\023\032\057\041\060" +
    "\027\061\042\062\031\063\030\064\033\001\002\000\006" +
    "\006\026\031\025\001\002\000\006\007\uffe6\057\024\001" +
    "\002\000\004\007\uffe9\001\002\000\024\014\100\015\114" +
    "\016\101\017\104\022\106\024\110\025\115\027\102\033" +
    "\107\001\002\000\024\005\034\023\032\046\037\057\041" +
    "\060\027\061\042\062\031\063\030\064\033\001\002\000" +
    "\050\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\026\uffc6" +
    "\030\uffc6\031\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\047" +
    "\uffc6\051\uffc6\052\uffc6\055\uffc6\072\uffc6\073\uffc6\075\uffc6" +
    "\001\002\000\050\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\026\uffc1\030\uffc1\031\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\047\uffc1\051\uffc1\052\uffc1\055\uffc1\072\uffc1\073" +
    "\uffc1\075\uffc1\001\002\000\050\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\026\uffc5\030\uffc5\031\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\047\uffc5\051\uffc5\052\uffc5\055\uffc5" +
    "\072\uffc5\073\uffc5\075\uffc5\001\002\000\050\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\026\uffc3\030\uffc3\031\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\047\uffc3\051\uffc3\052" +
    "\uffc3\055\uffc3\072\uffc3\073\uffc3\075\uffc3\001\002\000\050" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\026\uffc0\030" +
    "\uffc0\031\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\055\uffc0\072\uffc0\073\uffc0\075\uffc0\001" +
    "\002\000\032\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\026\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\047\uffdc\054" +
    "\060\001\002\000\030\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\026\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\047" +
    "\uffdd\001\002\000\024\007\uffeb\010\051\011\045\012\050" +
    "\013\052\026\047\040\046\041\056\043\053\001\002\000" +
    "\024\005\034\023\032\046\037\057\041\060\027\061\042" +
    "\062\031\063\030\064\033\001\002\000\050\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\026\uffc2\030\uffc2\031\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047\uffc2\051\uffc2\052" +
    "\uffc2\055\uffc2\072\uffc2\073\uffc2\075\uffc2\001\002\000\050" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\026\uffc7\030" +
    "\uffc7\031\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7" +
    "\051\uffc7\052\uffc7\055\uffc7\072\uffc7\073\uffc7\075\uffc7\001" +
    "\002\000\050\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\026\uffc4\030\uffc4\031\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\047\uffc4\051\uffc4\052\uffc4\055\uffc4\072\uffc4\073\uffc4" +
    "\075\uffc4\001\002\000\024\010\051\011\045\012\050\013" +
    "\052\026\047\040\046\041\056\043\053\047\054\001\002" +
    "\000\024\005\uffba\023\uffba\046\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\001\002\000\024\005\uffbe" +
    "\023\uffbe\046\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\001\002\000\024\005\uffa4\023\uffa4\046\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\001" +
    "\002\000\024\005\uffbb\023\uffbb\046\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\024\005" +
    "\uffbd\023\uffbd\046\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\001\002\000\024\005\uffbf\023\uffbf\046" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\001\002\000\024\005\uffbc\023\uffbc\046\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000\024" +
    "\005\uffa2\023\uffa2\046\uffa2\057\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\001\002\000\030\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\026\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\047\uffde\001\002\000\024\005\034\023\032" +
    "\046\037\057\041\060\027\061\042\062\031\063\030\064" +
    "\033\001\002\000\024\005\uffa3\023\uffa3\046\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002\000" +
    "\030\007\uffdf\010\051\011\045\012\050\013\052\026\047" +
    "\040\046\041\056\042\uffdf\043\053\047\uffdf\001\002\000" +
    "\010\005\063\046\064\057\061\001\002\000\030\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\026\uffae\030\uffae\040\uffae\041" +
    "\uffae\043\uffae\047\uffae\055\uffae\001\002\000\030\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\026\uffd9\030\uffd9\040\uffd9\041" +
    "\uffd9\043\uffd9\047\uffd9\055\uffd9\001\002\000\032\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\020\076\026\uffac\030\uffac\040" +
    "\uffac\041\uffac\043\uffac\047\uffac\055\uffac\001\002\000\010" +
    "\005\063\046\064\057\061\001\002\000\026\010\051\011" +
    "\045\012\050\013\052\026\047\030\067\040\046\041\056" +
    "\043\053\055\066\001\002\000\030\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\026\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\047\uffe1\001\002\000\010\005\063\046\064\057" +
    "\061\001\002\000\010\005\063\046\064\057\061\001\002" +
    "\000\030\010\051\011\045\012\050\013\052\026\047\030" +
    "\uffdb\040\046\041\056\043\053\047\uffdb\055\uffdb\001\002" +
    "\000\024\010\051\011\045\012\050\013\052\026\047\040" +
    "\046\041\056\043\053\055\073\001\002\000\030\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\026\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\047\uffe0\001\002\000\024\010\051" +
    "\011\045\012\050\013\052\026\047\040\046\041\056\043" +
    "\053\047\075\001\002\000\030\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\026\uffda\030\uffda\040\uffda\041\uffda\043\uffda\047" +
    "\uffda\055\uffda\001\002\000\004\021\077\001\002\000\030" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\026\uffad\030\uffad\040" +
    "\uffad\041\uffad\043\uffad\047\uffad\055\uffad\001\002\000\014" +
    "\006\uff9b\007\uff9b\030\uff9b\047\uff9b\053\uff9b\001\002\000" +
    "\014\006\uff9e\007\uff9e\030\uff9e\047\uff9e\053\uff9e\001\002" +
    "\000\004\052\137\001\002\000\014\006\uff9d\007\uff9d\030" +
    "\uff9d\047\uff9d\053\uff9d\001\002\000\014\006\uffa0\007\uffa0" +
    "\030\uffa0\047\uffa0\053\uffa0\001\002\000\014\006\uff9c\007" +
    "\uff9c\030\uff9c\047\uff9c\053\uff9c\001\002\000\004\006\135" +
    "\001\002\000\004\052\120\001\002\000\014\006\uff98\007" +
    "\uff98\030\uff98\047\uff98\053\uff98\001\002\000\014\006\uffa1" +
    "\007\uffa1\030\uffa1\047\uffa1\053\uffa1\001\002\000\014\006" +
    "\uff9f\007\uff9f\030\uff9f\047\uff9f\053\uff9f\001\002\000\006" +
    "\006\116\007\uffed\001\002\000\014\006\uff99\007\uff99\030" +
    "\uff99\047\uff99\053\uff99\001\002\000\014\006\uff9a\007\uff9a" +
    "\030\uff9a\047\uff9a\053\uff9a\001\002\000\024\005\034\023" +
    "\032\046\037\057\041\060\027\061\042\062\031\063\030" +
    "\064\033\001\002\000\024\007\ufff0\010\051\011\045\012" +
    "\050\013\052\026\047\040\046\041\056\043\053\001\002" +
    "\000\016\014\100\015\114\016\101\017\104\024\110\025" +
    "\115\001\002\000\004\053\122\001\002\000\004\006\123" +
    "\001\002\000\006\044\126\054\125\001\002\000\004\007" +
    "\uffcf\001\002\000\024\023\032\030\uffcb\055\uffcb\057\041" +
    "\060\027\061\042\062\031\063\030\064\033\001\002\000" +
    "\004\007\uffce\001\002\000\004\007\uffef\001\002\000\006" +
    "\030\132\055\133\001\002\000\006\030\uffcc\055\uffcc\001" +
    "\002\000\020\023\032\057\041\060\027\061\042\062\031" +
    "\063\030\064\033\001\002\000\004\007\uffd0\001\002\000" +
    "\006\030\uffcd\055\uffcd\001\002\000\004\044\126\001\002" +
    "\000\004\007\uffec\001\002\000\004\014\140\001\002\000" +
    "\004\030\141\001\002\000\016\014\100\015\114\016\101" +
    "\017\104\024\110\025\115\001\002\000\004\053\143\001" +
    "\002\000\004\006\144\001\002\000\004\050\146\001\002" +
    "\000\004\007\uffee\001\002\000\026\023\032\030\uffd4\050" +
    "\147\051\uffd4\057\041\060\027\061\042\062\031\063\030" +
    "\064\033\001\002\000\022\023\032\051\160\057\041\060" +
    "\027\061\042\062\031\063\030\064\033\001\002\000\006" +
    "\030\uffd5\051\uffd5\001\002\000\006\030\156\051\155\001" +
    "\002\000\004\031\153\001\002\000\020\023\032\057\041" +
    "\060\027\061\042\062\031\063\030\064\033\001\002\000" +
    "\006\030\uffd3\051\uffd3\001\002\000\004\007\uffd7\001\002" +
    "\000\022\023\032\050\147\057\041\060\027\061\042\062" +
    "\031\063\030\064\033\001\002\000\006\030\uffd6\051\uffd6" +
    "\001\002\000\006\030\uffd2\051\uffd2\001\002\000\004\031" +
    "\162\001\002\000\020\023\032\057\041\060\027\061\042" +
    "\062\031\063\030\064\033\001\002\000\004\051\164\001" +
    "\002\000\006\030\uffd1\051\uffd1\001\002\000\004\007\uffe7" +
    "\001\002\000\004\007\uffe8\001\002\000\006\005\171\007" +
    "\170\001\002\000\004\051\175\001\002\000\004\007\172" +
    "\001\002\000\004\051\173\001\002\000\004\007\174\001" +
    "\002\000\010\002\ufffa\100\ufffa\101\ufffa\001\002\000\004" +
    "\007\176\001\002\000\010\002\ufffb\100\ufffb\101\ufffb\001" +
    "\002\000\036\005\202\023\032\037\204\040\uffb3\041\uffb3" +
    "\043\uffb3\046\205\047\uffb3\057\041\060\027\061\042\062" +
    "\031\063\030\064\033\001\002\000\012\040\046\041\056" +
    "\043\053\047\231\001\002\000\020\040\046\041\056\043" +
    "\053\052\227\072\222\073\224\075\225\001\002\000\026" +
    "\030\uffaf\040\uffaf\041\uffaf\043\uffaf\047\uffaf\052\uffaf\054" +
    "\214\072\uffaf\073\uffaf\075\uffaf\001\002\000\024\030\uffb0" +
    "\040\uffb0\041\uffb0\043\uffb0\047\uffb0\052\uffb0\072\uffb0\073" +
    "\uffb0\075\uffb0\001\002\000\004\046\211\001\002\000\022" +
    "\005\202\023\032\057\041\060\027\061\042\062\031\063" +
    "\030\064\033\001\002\000\012\040\uffb4\041\uffb4\043\uffb4" +
    "\047\uffb4\001\002\000\004\047\210\001\002\000\012\040" +
    "\uffb5\041\uffb5\043\uffb5\047\uffb5\001\002\000\022\005\202" +
    "\023\032\057\041\060\027\061\042\062\031\063\030\064" +
    "\033\001\002\000\004\047\213\001\002\000\012\040\uffb6" +
    "\041\uffb6\043\uffb6\047\uffb6\001\002\000\010\005\063\046" +
    "\064\057\061\001\002\000\026\010\051\011\045\012\050" +
    "\013\052\026\047\030\217\040\046\041\056\043\053\055" +
    "\216\001\002\000\024\030\uffb1\040\uffb1\041\uffb1\043\uffb1" +
    "\047\uffb1\052\uffb1\072\uffb1\073\uffb1\075\uffb1\001\002\000" +
    "\010\005\063\046\064\057\061\001\002\000\024\010\051" +
    "\011\045\012\050\013\052\026\047\040\046\041\056\043" +
    "\053\055\221\001\002\000\024\030\uffb2\040\uffb2\041\uffb2" +
    "\043\uffb2\047\uffb2\052\uffb2\072\uffb2\073\uffb2\075\uffb2\001" +
    "\002\000\022\005\uffab\023\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\001\002\000\022\005\uffa7\023" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\001\002\000\022\005\uffaa\023\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\022\005\uffa8" +
    "\023\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\001\002\000\022\005\202\023\032\057\041\060\027" +
    "\061\042\062\031\063\030\064\033\001\002\000\022\005" +
    "\uffa9\023\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\001\002\000\012\040\uffb9\041\uffb9\043\uffb9\047" +
    "\uffb9\001\002\000\004\071\237\001\002\000\024\005\202" +
    "\023\032\046\233\057\041\060\027\061\042\062\031\063" +
    "\030\064\033\001\002\000\022\005\202\023\032\057\041" +
    "\060\027\061\042\062\031\063\030\064\033\001\002\000" +
    "\012\040\uffb8\041\uffb8\043\uffb8\047\uffb8\001\002\000\004" +
    "\047\236\001\002\000\012\040\uffb7\041\uffb7\043\uffb7\047" +
    "\uffb7\001\002\000\016\005\022\042\014\045\021\065\016" +
    "\070\023\076\012\001\002\000\016\005\022\042\014\045" +
    "\021\066\241\067\242\070\023\001\002\000\024\005\ufff5" +
    "\032\ufff5\042\ufff5\045\ufff5\051\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\077\ufff5\001\002\000\016\005\022\042\014\045\021" +
    "\065\016\070\023\076\012\001\002\000\024\005\ufff3\032" +
    "\ufff3\042\ufff3\045\ufff3\051\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\077\ufff3\001\002\000\014\005\022\042\014\045\021\066" +
    "\245\070\023\001\002\000\024\005\ufff4\032\ufff4\042\ufff4" +
    "\045\ufff4\051\ufff4\066\ufff4\067\ufff4\070\ufff4\077\ufff4\001" +
    "\002\000\004\007\247\001\002\000\010\002\ufffc\100\ufffc" +
    "\101\ufffc\001\002\000\024\010\051\011\045\012\050\013" +
    "\052\026\047\040\046\041\056\042\251\043\053\001\002" +
    "\000\004\005\252\001\002\000\004\046\253\001\002\000" +
    "\026\005\202\023\032\030\uffc8\047\uffc8\057\041\060\027" +
    "\061\042\062\031\063\030\064\033\001\002\000\006\030" +
    "\uffc9\047\uffc9\001\002\000\006\030\256\047\257\001\002" +
    "\000\022\005\202\023\032\057\041\060\027\061\042\062" +
    "\031\063\030\064\033\001\002\000\004\007\uffea\001\002" +
    "\000\006\030\uffca\047\uffca\001\002\000\024\005\ufff1\032" +
    "\ufff1\042\ufff1\045\ufff1\051\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\077\ufff1\001\002\000\014\005\022\042\014\045\021\070" +
    "\023\077\263\001\002\000\024\005\ufff6\032\ufff6\042\ufff6" +
    "\045\ufff6\051\ufff6\066\ufff6\067\ufff6\070\ufff6\077\ufff6\001" +
    "\002\000\022\005\022\032\ufff7\042\014\045\021\051\ufff7" +
    "\065\016\070\023\076\012\001\002\000\016\005\022\032" +
    "\ufff8\042\014\045\021\051\ufff8\070\023\001\002\000\006" +
    "\032\270\051\267\001\002\000\004\007\277\001\002\000" +
    "\004\005\271\001\002\000\004\007\272\001\002\000\004" +
    "\051\273\001\002\000\004\031\274\001\002\000\016\014" +
    "\100\015\114\016\101\017\104\024\110\025\115\001\002" +
    "\000\004\007\276\001\002\000\010\002\ufffd\100\ufffd\101" +
    "\ufffd\001\002\000\010\002\ufffe\100\ufffe\101\ufffe\001\002" +
    "\000\004\002\000\001\002\000\010\002\001\100\001\101" +
    "\001\001\002\000\004\046\303\001\002\000\010\005\304" +
    "\030\uffe2\047\uffe2\001\002\000\004\031\312\001\002\000" +
    "\006\030\307\047\310\001\002\000\006\030\uffe4\047\uffe4" +
    "\001\002\000\010\005\304\030\uffe2\047\uffe2\001\002\000" +
    "\004\050\ufff9\001\002\000\006\030\uffe5\047\uffe5\001\002" +
    "\000\016\014\100\015\114\016\101\017\104\024\110\025" +
    "\115\001\002\000\006\030\uffe3\047\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\010\011\007\012\005\014\004\001\001\000" +
    "\002\001\001\000\006\011\300\012\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\014\003\017\006\012\013\016\001\001\000\010\002\261" +
    "\003\017\006\012\001\001\000\002\001\001\000\010\007" +
    "\247\036\037\045\034\001\001\000\006\003\242\006\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\037\045\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\110\020" +
    "\104\021\111\022\102\023\112\001\001\000\010\007\035" +
    "\036\037\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\054\034" +
    "\043\001\001\000\010\007\042\036\037\045\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\054\034\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\056\036\037\045\034\001" +
    "\001\000\002\001\001\000\006\010\054\034\043\001\001" +
    "\000\006\041\064\042\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\073\042\061" +
    "\001\001\000\006\010\067\034\043\001\001\000\002\001" +
    "\001\000\006\041\071\042\061\001\001\000\006\041\070" +
    "\042\061\001\001\000\006\010\067\034\043\001\001\000" +
    "\006\010\067\034\043\001\001\000\002\001\001\000\006" +
    "\010\067\034\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\116" +
    "\036\037\045\034\001\001\000\006\010\054\034\043\001" +
    "\001\000\014\017\110\020\104\021\111\022\102\023\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\126\046\123\001\001\000\002\001\001\000\010\036\037" +
    "\043\127\045\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\037" +
    "\045\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\110\020\104\021\111\022" +
    "\102\023\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\144\001\001\000\002\001\001\000\012\024" +
    "\147\025\150\036\037\045\151\001\001\000\006\036\037" +
    "\045\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\037\045\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\156\036\037\045" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\037\045\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\027\205\033\177\035" +
    "\200\036\037\045\202\001\001\000\004\034\231\001\001" +
    "\000\006\030\225\034\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\027\206\035\200" +
    "\036\037\045\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\211\035\200\036\037" +
    "\045\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\214\042\061\001\001\000\006\010\067\034\043" +
    "\001\001\000\002\001\001\000\006\041\217\042\061\001" +
    "\001\000\006\010\067\034\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\227\036\037\045\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\233\035\200\036\037\045\202\001\001\000\012" +
    "\027\234\035\200\036\037\045\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\237" +
    "\003\017\006\012\001\001\000\006\003\242\006\012\001" +
    "\001\000\002\001\001\000\010\002\243\003\017\006\012" +
    "\001\001\000\002\001\001\000\006\003\242\006\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\054\034\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\253\036\037\037\254\045\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\035" +
    "\257\036\037\045\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\242\006\012\001" +
    "\001\000\002\001\001\000\012\002\264\003\017\006\012" +
    "\013\265\001\001\000\006\003\242\006\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\110\020\104\021\111\022\102\023\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\304" +
    "\016\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\110\020\104\021\111\022" +
    "\102\023\312\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= methods EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_declaration ::= method_header LPAREN_CURLY method_body RETURN IDENTIFIER SEMICOL RPAREN_CURLY COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_declaration ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_declaration ::= MAIN_FUNC LPAREN_CURLY method_body RETURN SEMICOL RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_declaration ::= MAIN_FUNC LPAREN_CURLY method_body RETURN IDENTIFIER SEMICOL RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= IF LPAREN comparison_list RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statements ::= IF LPAREN comparison_list RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // full_exp ::= IDENTIFIER COL type EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // full_exp ::= IDENTIFIER COL SEQ LPAREN_TRI type RPAREN_TRI EQUAL array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // full_exp ::= IDENTIFIER COL DICT LPAREN_TRI INT COMMA type RPAREN_TRI EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // full_exp ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= IDENTIFIER COL STRING EQUAL string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= IDENTIFIER EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN comparables_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= PRINT value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= PRINT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_exp ::= IDENTIFIER LPAREN_SQ simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_exp ::= IDENTIFIER LPAREN_SQ simple_integer_exp COMMA simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_exp ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_integer_exp ::= simple_integer_exp operator_binary simple_integer_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_integer_exp ::= LPAREN simple_integer_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_integer_exp ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= list COMMA value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparables_list ::= comparables_list COMMA comparable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparables_list ::= comparable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparables_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comparison ::= comparable comparison_operators comparable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comparison_list ::= comparison_list boolean_twoway_operators comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comparison_list ::= comparison_list boolean_twoway_operators LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comparison_list ::= NOT LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparison_list ::= LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparison_list ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparison_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparable ::= IDENTIFIER LPAREN_SQ simple_integer_exp COMMA simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparable ::= IDENTIFIER LPAREN_SQ simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparable ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparable ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparison_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
