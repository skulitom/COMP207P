
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\014\004\000\002\002\004\000\002\014" +
    "\003\000\002\014\003\000\002\011\007\000\002\011\011" +
    "\000\002\011\007\000\002\012\007\000\002\013\003\000" +
    "\002\013\002\000\002\002\004\000\002\002\003\000\002" +
    "\054\005\000\002\054\013\000\002\054\011\000\002\003" +
    "\004\000\002\003\003\000\002\006\007\000\002\006\012" +
    "\000\002\006\014\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\015\005\000\002\015\003" +
    "\000\002\016\005\000\002\016\002\000\002\007\005\000" +
    "\002\007\006\000\002\007\005\000\002\007\004\000\002" +
    "\007\003\000\002\035\010\000\002\031\005\000\002\030" +
    "\005\000\002\030\003\000\002\030\002\000\002\027\005" +
    "\000\002\027\004\000\002\027\007\000\002\050\005\000" +
    "\002\050\003\000\002\052\003\000\002\047\005\000\002" +
    "\047\003\000\002\047\002\000\002\020\003\000\002\020" +
    "\003\000\002\040\005\000\002\040\003\000\002\040\002" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\037" +
    "\003\000\002\037\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\026\011\000\002\032\005\000\002" +
    "\032\003\000\002\046\005\000\002\046\003\000\002\053" +
    "\004\000\002\053\004\000\002\043\003\000\002\043\005" +
    "\000\002\043\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\021\003\000\002\021\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\026\005\013\032\012\042\006\045\022\066" +
    "\015\071\020\077\010\101\004\102\016\103\021\001\002" +
    "\000\034\005\034\011\045\023\052\037\033\042\006\044" +
    "\041\046\037\060\047\061\032\062\042\063\053\064\036" +
    "\065\044\001\002\000\040\002\ufff6\005\ufff6\032\ufff6\042" +
    "\ufff6\045\ufff6\052\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\001\002\000" +
    "\034\005\034\011\045\023\052\037\033\042\006\044\041" +
    "\046\037\060\047\061\032\062\042\063\053\064\036\065" +
    "\044\001\002\000\010\002\uffff\102\uffff\103\uffff\001\002" +
    "\000\024\005\013\032\012\042\006\045\022\066\015\071" +
    "\020\077\010\100\ufff8\101\004\001\002\000\004\007\245" +
    "\001\002\000\036\005\034\007\uffe5\011\045\023\052\037" +
    "\033\042\006\044\041\046\037\060\047\061\032\062\042" +
    "\063\053\064\036\065\044\001\002\000\040\005\034\006" +
    "\167\011\045\023\052\031\170\037\033\042\006\044\041" +
    "\046\037\060\047\061\032\062\042\063\053\064\036\065" +
    "\044\001\002\000\004\007\uffeb\001\002\000\004\046\144" +
    "\001\002\000\004\051\140\001\002\000\004\051\130\001" +
    "\002\000\006\007\uffe4\060\127\001\002\000\004\005\101" +
    "\001\002\000\034\005\034\011\045\023\052\037\033\042" +
    "\006\044\041\046\037\060\047\061\032\062\042\063\053" +
    "\064\036\065\044\001\002\000\030\002\ufffe\005\013\032" +
    "\012\042\006\045\022\066\015\071\020\077\010\101\004" +
    "\102\ufffe\103\ufffe\001\002\000\010\002\026\102\016\103" +
    "\021\001\002\000\040\002\ufff1\005\ufff1\032\ufff1\042\ufff1" +
    "\045\ufff1\052\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\077" +
    "\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\001\002\000\004" +
    "\002\000\001\002\000\010\002\001\102\001\103\001\001" +
    "\002\000\040\002\ufff7\005\ufff7\032\ufff7\042\ufff7\045\ufff7" +
    "\052\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\077\ufff7\100" +
    "\ufff7\101\ufff7\102\ufff7\103\ufff7\001\002\000\052\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0\050\uffc0" +
    "\052\uffc0\053\uffc0\056\uffc0\073\uffc0\074\uffc0\076\uffc0\001" +
    "\002\000\052\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6\056\uffc6\073\uffc6" +
    "\074\uffc6\076\uffc6\001\002\000\004\046\076\001\002\000" +
    "\054\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\020\074" +
    "\026\uffad\030\uffad\031\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\047\uffad\050\uffad\052\uffad\053\uffad\056\uffad\073\uffad" +
    "\074\uffad\076\uffad\001\002\000\052\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\026\uffc1\030\uffc1\031\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\047\uffc1\050\uffc1\052\uffc1\053" +
    "\uffc1\056\uffc1\073\uffc1\074\uffc1\076\uffc1\001\002\000\052" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\026\uffbe\030" +
    "\uffbe\031\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\047\uffbe" +
    "\050\uffbe\052\uffbe\053\uffbe\056\uffbe\073\uffbe\074\uffbe\076" +
    "\uffbe\001\002\000\034\005\034\011\045\023\052\037\033" +
    "\042\006\044\041\046\037\060\047\061\032\062\042\063" +
    "\053\064\036\065\044\001\002\000\052\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\026\uffc7\030\uffc7\031\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7\050\uffc7\052\uffc7" +
    "\053\uffc7\056\uffc7\073\uffc7\074\uffc7\076\uffc7\001\002\000" +
    "\052\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\026\uffd0" +
    "\030\uffd0\031\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\047" +
    "\uffd0\050\uffd0\052\uffd0\053\uffd0\056\uffd0\073\uffd0\074\uffd0" +
    "\076\uffd0\001\002\000\052\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\026\uffc4\030\uffc4\031\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\047\uffc4\050\uffc4\052\uffc4\053\uffc4\056" +
    "\uffc4\073\uffc4\074\uffc4\076\uffc4\001\002\000\042\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\026\uffdb\030\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\047\uffdb\053\uffdb\073\uffdb" +
    "\074\uffdb\076\uffdb\001\002\000\052\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\026\uffbd\030\uffbd\031\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\047\uffbd\050\uffbd\052\uffbd\053" +
    "\uffbd\056\uffbd\073\uffbd\074\uffbd\076\uffbd\001\002\000\006" +
    "\005\071\060\070\001\002\000\052\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\026\uffbf\030\uffbf\031\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\047\uffbf\050\uffbf\052\uffbf\053" +
    "\uffbf\056\uffbf\073\uffbf\074\uffbf\076\uffbf\001\002\000\052" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\026\uffaf\030" +
    "\uffaf\031\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\047\uffaf" +
    "\050\uffaf\052\uffaf\053\uffaf\056\uffaf\073\uffaf\074\uffaf\076" +
    "\uffaf\001\002\000\024\007\uffe9\010\062\011\055\012\060" +
    "\013\063\026\057\040\056\041\066\043\064\001\002\000" +
    "\052\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\026\uffc2" +
    "\030\uffc2\031\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047" +
    "\uffc2\050\uffc2\052\uffc2\053\uffc2\056\uffc2\073\uffc2\074\uffc2" +
    "\076\uffc2\001\002\000\052\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\026\uffc3\030\uffc3\031\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\056" +
    "\uffc3\073\uffc3\074\uffc3\076\uffc3\001\002\000\052\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\026\uffc5\030\uffc5\031" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\053\uffc5\056\uffc5\073\uffc5\074\uffc5\076\uffc5\001" +
    "\002\000\034\005\uffb7\011\uffb7\023\uffb7\037\uffb7\042\uffb7" +
    "\044\uffb7\046\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\001\002\000\034\005\uffbb\011\uffbb\023\uffbb" +
    "\037\uffbb\042\uffbb\044\uffbb\046\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\034\005\uffa6" +
    "\011\uffa6\023\uffa6\037\uffa6\042\uffa6\044\uffa6\046\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\001\002" +
    "\000\034\005\uffb8\011\uffb8\023\uffb8\037\uffb8\042\uffb8\044" +
    "\uffb8\046\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\001\002\000\034\005\uffba\011\uffba\023\uffba\037" +
    "\uffba\042\uffba\044\uffba\046\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\001\002\000\042\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\026\uffdc\030\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\047\uffdc\053\uffdc\073\uffdc\074" +
    "\uffdc\076\uffdc\001\002\000\034\005\uffbc\011\uffbc\023\uffbc" +
    "\037\uffbc\042\uffbc\044\uffbc\046\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002\000\034\005\uffb9" +
    "\011\uffb9\023\uffb9\037\uffb9\042\uffb9\044\uffb9\046\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002" +
    "\000\034\005\uffa4\011\uffa4\023\uffa4\037\uffa4\042\uffa4\044" +
    "\uffa4\046\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\001\002\000\034\005\034\011\045\023\052\037" +
    "\033\042\006\044\041\046\037\060\047\061\032\062\042" +
    "\063\053\064\036\065\044\001\002\000\034\005\uffa5\011" +
    "\uffa5\023\uffa5\037\uffa5\042\uffa5\044\uffa5\046\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\001\002\000" +
    "\042\007\uffdf\010\062\011\055\012\060\013\063\026\057" +
    "\030\uffdf\040\056\041\066\042\uffdf\043\064\047\uffdf\053" +
    "\uffdf\073\uffdf\074\uffdf\076\uffdf\001\002\000\052\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\026\uffb1\030\uffb1\031" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\047\uffb1\050\uffb1" +
    "\052\uffb1\053\uffb1\056\uffb1\073\uffb1\074\uffb1\076\uffb1\001" +
    "\002\000\052\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\026\uffb0\030\uffb0\031\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\047\uffb0\050\uffb0\052\uffb0\053\uffb0\056\uffb0\073\uffb0" +
    "\074\uffb0\076\uffb0\001\002\000\024\010\062\011\055\012" +
    "\060\013\063\026\057\040\056\041\066\043\064\047\073" +
    "\001\002\000\042\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\026\uffdd\030\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\047\uffdd\053\uffdd\073\uffdd\074\uffdd\076\uffdd\001\002\000" +
    "\004\021\075\001\002\000\052\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\026\uffae\030\uffae\031\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\047\uffae\050\uffae\052\uffae\053\uffae" +
    "\056\uffae\073\uffae\074\uffae\076\uffae\001\002\000\034\005" +
    "\034\011\045\023\052\037\033\042\006\044\041\046\037" +
    "\060\047\061\032\062\042\063\053\064\036\065\044\001" +
    "\002\000\024\010\062\011\055\012\060\013\063\026\057" +
    "\040\056\041\066\043\064\047\100\001\002\000\042\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\026\uffde\030\uffde" +
    "\040\uffde\041\uffde\042\uffde\043\uffde\047\uffde\053\uffde\073" +
    "\uffde\074\uffde\076\uffde\001\002\000\004\046\102\001\002" +
    "\000\010\005\103\030\uffe0\047\uffe0\001\002\000\004\031" +
    "\111\001\002\000\006\030\106\047\107\001\002\000\006" +
    "\030\uffe2\047\uffe2\001\002\000\010\005\103\030\uffe0\047" +
    "\uffe0\001\002\000\004\051\ufffa\001\002\000\006\030\uffe3" +
    "\047\uffe3\001\002\000\022\005\124\014\112\015\125\016" +
    "\113\017\115\022\117\024\120\025\126\001\002\000\014" +
    "\006\uff9b\007\uff9b\030\uff9b\047\uff9b\054\uff9b\001\002\000" +
    "\014\006\uff9e\007\uff9e\030\uff9e\047\uff9e\054\uff9e\001\002" +
    "\000\014\006\uff9d\007\uff9d\030\uff9d\047\uff9d\054\uff9d\001" +
    "\002\000\014\006\uffa2\007\uffa2\030\uffa2\047\uffa2\054\uffa2" +
    "\001\002\000\014\006\uff9c\007\uff9c\030\uff9c\047\uff9c\054" +
    "\uff9c\001\002\000\014\006\uffa1\007\uffa1\030\uffa1\047\uffa1" +
    "\054\uffa1\001\002\000\014\006\uff98\007\uff98\030\uff98\047" +
    "\uff98\054\uff98\001\002\000\014\006\uffa3\007\uffa3\030\uffa3" +
    "\047\uffa3\054\uffa3\001\002\000\014\006\uff9f\007\uff9f\030" +
    "\uff9f\047\uff9f\054\uff9f\001\002\000\006\030\uffe1\047\uffe1" +
    "\001\002\000\014\006\uffa0\007\uffa0\030\uffa0\047\uffa0\054" +
    "\uffa0\001\002\000\014\006\uff99\007\uff99\030\uff99\047\uff99" +
    "\054\uff99\001\002\000\014\006\uff9a\007\uff9a\030\uff9a\047" +
    "\uff9a\054\uff9a\001\002\000\004\007\uffea\001\002\000\024" +
    "\005\013\032\012\042\006\045\022\052\ufff8\066\015\071" +
    "\020\077\010\101\004\001\002\000\032\005\013\032\012" +
    "\042\006\045\022\052\ufff9\066\015\067\ufff9\070\ufff9\071" +
    "\020\077\010\100\ufff9\101\004\001\002\000\004\052\133" +
    "\001\002\000\006\007\135\031\134\001\002\000\022\005" +
    "\124\014\112\015\125\016\113\017\115\022\117\024\120" +
    "\025\126\001\002\000\010\002\ufffd\102\ufffd\103\ufffd\001" +
    "\002\000\004\007\137\001\002\000\010\002\ufffc\102\ufffc" +
    "\103\ufffc\001\002\000\022\005\013\032\012\042\006\045" +
    "\022\066\015\071\020\077\010\101\004\001\002\000\024" +
    "\005\013\032\012\042\006\045\022\052\142\066\015\071" +
    "\020\077\010\101\004\001\002\000\004\007\143\001\002" +
    "\000\010\002\ufffb\102\ufffb\103\ufffb\001\002\000\034\005" +
    "\034\011\045\023\052\037\033\042\006\044\041\046\037" +
    "\060\047\061\032\062\042\063\053\064\036\065\044\001" +
    "\002\000\034\010\062\011\055\012\060\013\063\026\057" +
    "\040\056\041\066\043\064\047\uffb4\053\165\073\162\074" +
    "\161\076\164\001\002\000\012\040\056\041\066\043\064" +
    "\047\150\001\002\000\012\040\uffb2\041\uffb2\043\uffb2\047" +
    "\uffb2\001\002\000\004\072\153\001\002\000\034\005\034" +
    "\011\045\023\052\037\033\042\006\044\041\046\037\060" +
    "\047\061\032\062\042\063\053\064\036\065\044\001\002" +
    "\000\012\040\uffb3\041\uffb3\043\uffb3\047\uffb3\001\002\000" +
    "\026\005\013\032\012\042\006\045\022\066\015\067\ufff8" +
    "\070\ufff8\071\020\077\010\101\004\001\002\000\006\067" +
    "\155\070\156\001\002\000\040\002\ufff3\005\ufff3\032\ufff3" +
    "\042\ufff3\045\ufff3\052\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\001\002" +
    "\000\024\005\013\032\012\042\006\045\022\066\015\067" +
    "\ufff8\071\020\077\010\101\004\001\002\000\004\067\160" +
    "\001\002\000\040\002\ufff4\005\ufff4\032\ufff4\042\ufff4\045" +
    "\ufff4\052\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\077\ufff4" +
    "\100\ufff4\101\ufff4\102\ufff4\103\ufff4\001\002\000\034\005" +
    "\uffab\011\uffab\023\uffab\037\uffab\042\uffab\044\uffab\046\uffab" +
    "\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\001" +
    "\002\000\034\005\uffac\011\uffac\023\uffac\037\uffac\042\uffac" +
    "\044\uffac\046\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\065\uffac\001\002\000\034\005\034\011\045\023\052" +
    "\037\033\042\006\044\041\046\037\060\047\061\032\062" +
    "\042\063\053\064\036\065\044\001\002\000\034\005\uffa9" +
    "\011\uffa9\023\uffa9\037\uffa9\042\uffa9\044\uffa9\046\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\001\002" +
    "\000\034\005\uffaa\011\uffaa\023\uffaa\037\uffaa\042\uffaa\044" +
    "\uffaa\046\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\001\002\000\024\010\062\011\055\012\060\013" +
    "\063\026\057\040\056\041\066\043\064\047\uffb5\001\002" +
    "\000\034\005\034\011\045\023\052\037\033\042\006\044" +
    "\041\046\037\060\047\061\032\062\042\063\053\064\036" +
    "\065\044\001\002\000\026\005\124\014\112\015\125\016" +
    "\113\017\115\022\117\024\120\025\126\027\172\033\173" +
    "\001\002\000\024\007\uffe6\010\062\011\055\012\060\013" +
    "\063\026\057\040\056\041\066\043\064\001\002\000\004" +
    "\053\215\001\002\000\004\053\177\001\002\000\006\006" +
    "\175\007\uffed\001\002\000\034\005\034\011\045\023\052" +
    "\037\033\042\006\044\041\046\037\060\047\061\032\062" +
    "\042\063\053\064\036\065\044\001\002\000\024\007\ufff0" +
    "\010\062\011\055\012\060\013\063\026\057\040\056\041" +
    "\066\043\064\001\002\000\022\005\124\014\112\015\125" +
    "\016\113\017\115\022\117\024\120\025\126\001\002\000" +
    "\004\054\201\001\002\000\004\006\202\001\002\000\040" +
    "\005\034\007\uffcd\011\045\023\052\030\uffcd\042\006\044" +
    "\041\050\uffcd\055\203\060\047\061\032\062\042\063\053" +
    "\064\036\065\044\001\002\000\036\005\034\011\045\023" +
    "\052\030\uffcd\042\006\044\041\050\uffcd\056\uffcd\060\047" +
    "\061\032\062\042\063\053\064\036\065\044\001\002\000" +
    "\004\007\uffef\001\002\000\012\007\uffce\030\uffce\050\uffce" +
    "\056\uffce\001\002\000\010\007\uffd1\030\207\050\211\001" +
    "\002\000\030\005\uffcc\011\uffcc\023\uffcc\042\uffcc\044\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\001" +
    "\002\000\030\005\034\011\045\023\052\042\006\044\041" +
    "\060\047\061\032\062\042\063\053\064\036\065\044\001" +
    "\002\000\030\005\uffcb\011\uffcb\023\uffcb\042\uffcb\044\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\001" +
    "\002\000\012\007\uffcf\030\uffcf\050\uffcf\056\uffcf\001\002" +
    "\000\010\030\207\050\211\056\214\001\002\000\004\007" +
    "\uffd2\001\002\000\004\014\216\001\002\000\004\030\217" +
    "\001\002\000\022\005\124\014\112\015\125\016\113\017" +
    "\115\022\117\024\120\025\126\001\002\000\004\054\221" +
    "\001\002\000\004\006\222\001\002\000\004\051\224\001" +
    "\002\000\004\007\uffee\001\002\000\036\005\034\011\045" +
    "\023\052\030\uffd6\042\006\044\041\051\230\052\uffd6\060" +
    "\047\061\032\062\042\063\053\064\036\065\044\001\002" +
    "\000\006\030\uffd7\052\uffd7\001\002\000\006\030\240\052" +
    "\241\001\002\000\004\031\236\001\002\000\032\005\034" +
    "\011\045\023\052\042\006\044\041\052\232\060\047\061" +
    "\032\062\042\063\053\064\036\065\044\001\002\000\004" +
    "\031\233\001\002\000\006\030\uffd4\052\uffd4\001\002\000" +
    "\030\005\034\011\045\023\052\042\006\044\041\060\047" +
    "\061\032\062\042\063\053\064\036\065\044\001\002\000" +
    "\004\052\235\001\002\000\006\030\uffd3\052\uffd3\001\002" +
    "\000\030\005\034\011\045\023\052\042\006\044\041\060" +
    "\047\061\032\062\042\063\053\064\036\065\044\001\002" +
    "\000\006\030\uffd5\052\uffd5\001\002\000\032\005\034\011" +
    "\045\023\052\042\006\044\041\051\230\060\047\061\032" +
    "\062\042\063\053\064\036\065\044\001\002\000\004\007" +
    "\uffd9\001\002\000\006\030\uffd8\052\uffd8\001\002\000\024" +
    "\007\uffec\010\062\011\055\012\060\013\063\026\057\040" +
    "\056\041\066\043\064\001\002\000\024\007\uffe8\010\062" +
    "\011\055\012\060\013\063\026\057\040\056\041\066\043" +
    "\064\001\002\000\040\002\ufff2\005\ufff2\032\ufff2\042\ufff2" +
    "\045\ufff2\052\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\077" +
    "\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\001\002\000\004" +
    "\100\247\001\002\000\040\002\ufff5\005\ufff5\032\ufff5\042" +
    "\ufff5\045\ufff5\052\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\001\002\000" +
    "\024\010\062\011\055\012\060\013\063\026\057\040\056" +
    "\041\066\042\251\043\064\001\002\000\004\005\252\001" +
    "\002\000\004\046\253\001\002\000\040\005\034\011\045" +
    "\023\052\030\uffc8\037\033\042\006\044\041\046\037\047" +
    "\uffc8\060\047\061\032\062\042\063\053\064\036\065\044" +
    "\001\002\000\006\030\256\047\257\001\002\000\026\010" +
    "\062\011\055\012\060\013\063\026\057\030\uffc9\040\056" +
    "\041\066\043\064\047\uffc9\001\002\000\034\005\034\011" +
    "\045\023\052\037\033\042\006\044\041\046\037\060\047" +
    "\061\032\062\042\063\053\064\036\065\044\001\002\000" +
    "\052\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\026\uffb6" +
    "\030\uffb6\031\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\047" +
    "\uffb6\050\uffb6\052\uffb6\053\uffb6\056\uffb6\073\uffb6\074\uffb6" +
    "\076\uffb6\001\002\000\026\010\062\011\055\012\060\013" +
    "\063\026\057\030\uffca\040\056\041\066\043\064\047\uffca" +
    "\001\002\000\024\007\uffe7\010\062\011\055\012\060\013" +
    "\063\026\057\040\056\041\066\043\064\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\022\002\022\003\004\006\010\011\006\012" +
    "\016\014\023\026\013\054\024\001\001\000\020\007\260" +
    "\026\034\037\050\043\037\051\042\052\030\053\045\001" +
    "\001\000\002\001\001\000\020\007\247\026\034\037\050" +
    "\043\037\051\042\052\030\053\045\001\001\000\002\001" +
    "\001\000\016\002\130\003\004\006\010\013\245\026\013" +
    "\054\024\001\001\000\002\001\001\000\020\007\243\026" +
    "\034\037\050\043\037\051\042\052\030\053\045\001\001" +
    "\000\020\007\170\026\034\037\050\043\037\051\042\052" +
    "\030\053\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\047\026\034\037\050\043\037" +
    "\051\042\052\030\053\045\001\001\000\012\003\027\006" +
    "\010\026\013\054\024\001\001\000\006\011\026\012\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\071\026\034\037\050\043\037" +
    "\051\042\052\030\053\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\064\036\053\053\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\066\026\034" +
    "\037\050\043\037\051\042\052\030\053\045\001\001\000" +
    "\002\001\001\000\010\010\064\036\053\053\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\064\036" +
    "\053\053\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\076\026\034\037\050\043" +
    "\037\051\042\052\030\053\045\001\001\000\010\010\064" +
    "\036\053\053\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\103\016\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\120" +
    "\022\115\023\121\024\113\025\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\130\003\004\006\010\013\131\026\013" +
    "\054\024\001\001\000\012\003\027\006\010\026\013\054" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\120\022\115\023\121\024\113\025\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\140\003\004\006\010\026\013\054\024\001\001\000" +
    "\012\003\027\006\010\026\013\054\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\144\026\034\032" +
    "\146\037\050\043\037\046\145\051\042\052\030\053\045" +
    "\001\001\000\012\010\064\033\162\036\053\053\060\001" +
    "\001\000\004\036\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\144\026\034\032\151\037\050\043" +
    "\037\051\042\052\030\053\045\001\001\000\002\001\001" +
    "\000\016\002\130\003\004\006\010\013\153\026\013\054" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\130\003\004\006\010\013\156\026\013\054\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\165\026\034\037\050\043" +
    "\037\051\042\052\030\053\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\064\036\053\053\060\001" +
    "\001\000\020\007\242\026\034\037\050\043\037\051\042" +
    "\052\030\053\045\001\001\000\014\021\120\022\115\023" +
    "\121\024\113\025\173\001\001\000\010\010\064\036\053" +
    "\053\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\175\026\034\037\050\043\037" +
    "\051\042\052\030\053\045\001\001\000\010\010\064\036" +
    "\053\053\060\001\001\000\014\021\120\022\115\023\121" +
    "\024\113\025\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\026\034\037\050\043\037\047\205\050\203" +
    "\051\204\052\030\053\045\001\001\000\020\026\034\037" +
    "\050\043\037\047\212\051\204\052\030\053\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\207\001" +
    "\001\000\002\001\001\000\016\026\034\037\050\043\037" +
    "\051\211\052\030\053\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\120\022" +
    "\115\023\121\024\113\025\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\222\001\001\000\002\001" +
    "\001\000\022\026\034\027\224\030\225\037\050\043\037" +
    "\051\226\052\030\053\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\034\037\050" +
    "\043\037\051\230\052\030\053\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\034\037\050\043\037" +
    "\051\233\052\030\053\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\026\034\037\050\043\037\051\236" +
    "\052\030\053\045\001\001\000\002\001\001\000\020\026" +
    "\034\027\241\037\050\043\037\051\226\052\030\053\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\064\036\053\053\060\001\001\000\010\010\064\036\053" +
    "\053\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\064\036\053\053\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\254\026" +
    "\034\037\050\040\253\043\037\051\042\052\030\053\045" +
    "\001\001\000\002\001\001\000\010\010\064\036\053\053" +
    "\060\001\001\000\020\007\257\026\034\037\050\043\037" +
    "\051\042\052\030\053\045\001\001\000\002\001\001\000" +
    "\010\010\064\036\053\053\060\001\001\000\010\010\064" +
    "\036\053\053\060\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= methods EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // methods ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_declaration ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // special_statement ::= LOOP method_body POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // special_statement ::= IF LPAREN comparison_parameters RPAREN THEN method_body ELSE method_body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // special_statement ::= IF LPAREN comparison_parameters RPAREN THEN method_body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= special_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // full_exp ::= IDENTIFIER COL type EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // full_exp ::= IDENTIFIER COL SEQ LPAREN_TRI type RPAREN_TRI EQUAL array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // full_exp ::= IDENTIFIER COL DICT LPAREN_TRI INT COMMA type RPAREN_TRI EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // full_exp ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= IDENTIFIER EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= PRINT simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= RETURN simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= READ simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // full_exp ::= IDENTIFIER simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // full_exp ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_exp ::= NOT LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_exp ::= simple_exp negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array ::= list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list ::= list delimitors value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // delimitors ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // delimitors ::= CONCAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparables_list ::= comparables_list COMMA simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparables_list ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparables_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_call ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN comparables_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparison ::= simple_exp comparison_operators simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparison ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparison_parameters ::= comparison_parameters boolean_twoway_operators comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparison_parameters ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // negative ::= MINUS INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // negative ::= MINUS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
