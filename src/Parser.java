
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\057\005\000\002\002\004\000\002\057" +
    "\004\000\002\057\004\000\002\057\003\000\002\014\004" +
    "\000\002\014\003\000\002\014\003\000\002\011\007\000" +
    "\002\011\011\000\002\060\007\000\002\012\007\000\002" +
    "\013\003\000\002\013\002\000\002\002\004\000\002\002" +
    "\003\000\002\054\005\000\002\054\013\000\002\054\011" +
    "\000\002\003\004\000\002\003\003\000\002\006\007\000" +
    "\002\006\007\000\002\006\005\000\002\006\007\000\002" +
    "\006\005\000\002\006\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\005\000\002\006\003\000\002\006\003\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\005\000\002\016\002\000\002\055\010\000\002\055" +
    "\006\000\002\056\003\000\002\056\003\000\002\007\005" +
    "\000\002\007\006\000\002\007\005\000\002\007\004\000" +
    "\002\007\003\000\002\007\003\000\002\035\007\000\002" +
    "\031\005\000\002\030\005\000\002\030\003\000\002\030" +
    "\002\000\002\027\005\000\002\027\004\000\002\027\007" +
    "\000\002\052\003\000\002\047\005\000\002\047\005\000" +
    "\002\047\006\000\002\047\004\000\002\047\003\000\002" +
    "\047\003\000\002\047\002\000\002\050\005\000\002\020" +
    "\003\000\002\020\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\005\000\002\037\003\000\002\037" +
    "\003\000\002\061\003\000\002\061\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\026\011\000\002\046\005\000\002\046\003\000\002\053" +
    "\004\000\002\053\004\000\002\043\003\000\002\043\005" +
    "\000\002\043\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\021\003\000" +
    "\002\021\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\022\003\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\032\005\016\032\015\034\011\042\007\045" +
    "\026\067\020\072\024\100\013\102\005\103\022\104\025" +
    "\105\030\001\002\000\032\002\ufffd\005\016\032\015\034" +
    "\011\042\007\045\026\067\020\072\024\100\013\102\005" +
    "\104\025\105\030\001\002\000\100\005\110\007\uffc0\010" +
    "\uffc0\011\122\012\uffc0\013\uffc0\023\131\026\uffc0\027\040" +
    "\030\uffc0\033\045\037\107\040\uffc0\041\uffc0\042\007\043" +
    "\uffc0\044\116\046\114\050\uffc0\051\uffc0\054\uffc0\056\105" +
    "\061\124\062\106\063\117\064\132\065\113\066\121\074" +
    "\uffc0\075\uffc0\077\uffc0\001\002\000\044\002\ufff2\005\ufff2" +
    "\032\ufff2\034\ufff2\042\ufff2\045\ufff2\053\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2" +
    "\104\ufff2\105\ufff2\001\002\000\040\005\110\011\122\023" +
    "\131\027\040\033\045\037\107\042\007\044\116\046\114" +
    "\061\124\062\106\063\117\064\132\065\113\066\121\001" +
    "\002\000\010\002\ufffb\103\ufffb\104\ufffb\001\002\000\026" +
    "\005\061\014\047\015\062\016\050\017\052\022\054\024" +
    "\055\025\063\027\040\033\045\001\002\000\004\007\uffe0" +
    "\001\002\000\030\005\016\032\015\034\011\042\007\045" +
    "\026\067\020\072\024\100\013\101\ufff4\102\005\105\030" +
    "\001\002\000\004\007\272\001\002\000\100\005\110\007" +
    "\uffc0\010\uffc0\011\122\012\uffc0\013\uffc0\023\131\026\uffc0" +
    "\027\040\030\uffc0\033\045\037\107\040\uffc0\041\uffc0\042" +
    "\007\043\uffc0\044\116\046\114\050\uffc0\051\uffc0\054\uffc0" +
    "\056\105\061\124\062\106\063\117\064\132\065\113\066" +
    "\121\074\uffc0\075\uffc0\077\uffc0\001\002\000\106\005\110" +
    "\006\236\007\uffc0\010\uffc0\011\122\012\uffc0\013\uffc0\020" +
    "\240\023\131\026\uffc0\027\040\030\uffc0\031\237\033\045" +
    "\037\107\040\uffc0\041\uffc0\042\007\043\uffc0\044\116\046" +
    "\114\050\uffc0\051\uffc0\054\uffc0\056\105\061\124\062\106" +
    "\063\117\064\132\065\113\066\121\074\uffc0\075\uffc0\077" +
    "\uffc0\001\002\000\004\007\uffe7\001\002\000\004\046\225" +
    "\001\002\000\004\002\224\001\002\000\004\052\220\001" +
    "\002\000\004\052\210\001\002\000\006\007\uffdf\061\207" +
    "\001\002\000\004\005\203\001\002\000\100\005\110\007" +
    "\uffc0\010\uffc0\011\122\012\uffc0\013\uffc0\023\131\026\uffc0" +
    "\027\040\030\uffc0\033\045\037\107\040\uffc0\041\uffc0\042" +
    "\007\043\uffc0\044\116\046\114\050\uffc0\051\uffc0\054\uffc0" +
    "\056\105\061\124\062\106\063\117\064\132\065\113\066" +
    "\121\074\uffc0\075\uffc0\077\uffc0\001\002\000\034\002\ufffa" +
    "\005\016\032\015\034\011\042\007\045\026\067\020\072" +
    "\024\100\013\102\005\103\ufffa\104\ufffa\105\030\001\002" +
    "\000\004\005\036\001\002\000\006\103\022\104\025\001" +
    "\002\000\044\002\uffed\005\uffed\032\uffed\034\uffed\042\uffed" +
    "\045\uffed\053\uffed\067\uffed\070\uffed\071\uffed\072\uffed\100" +
    "\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\001\002" +
    "\000\032\002\ufffe\005\016\032\015\034\011\042\007\045" +
    "\026\067\020\072\024\100\013\102\005\104\025\105\030" +
    "\001\002\000\010\002\ufffc\103\ufffc\104\ufffc\001\002\000" +
    "\006\002\001\104\025\001\002\000\004\052\037\001\002" +
    "\000\014\005\041\027\040\030\uffda\033\045\053\uffda\001" +
    "\002\000\004\054\076\001\002\000\004\031\074\001\002" +
    "\000\004\031\070\001\002\000\006\030\066\053\065\001" +
    "\002\000\010\030\uffdd\047\uffdd\053\uffdd\001\002\000\004" +
    "\054\046\001\002\000\022\005\061\014\047\015\062\016" +
    "\050\017\052\022\054\024\055\025\063\001\002\000\042" +
    "\005\uff8d\006\uff8d\007\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\022\uff8d\024\uff8d\025\uff8d\027\uff8d\030\uff8d\033\uff8d" +
    "\047\uff8d\053\uff8d\055\uff8d\001\002\000\042\005\uff90\006" +
    "\uff90\007\uff90\014\uff90\015\uff90\016\uff90\017\uff90\022\uff90" +
    "\024\uff90\025\uff90\027\uff90\030\uff90\033\uff90\047\uff90\053" +
    "\uff90\055\uff90\001\002\000\042\005\uff8f\006\uff8f\007\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\022\uff8f\024\uff8f\025" +
    "\uff8f\027\uff8f\030\uff8f\033\uff8f\047\uff8f\053\uff8f\055\uff8f" +
    "\001\002\000\042\005\uff94\006\uff94\007\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\022\uff94\024\uff94\025\uff94\027\uff94" +
    "\030\uff94\033\uff94\047\uff94\053\uff94\055\uff94\001\002\000" +
    "\042\005\uff8e\006\uff8e\007\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\022\uff8e\024\uff8e\025\uff8e\027\uff8e\030\uff8e\033" +
    "\uff8e\047\uff8e\053\uff8e\055\uff8e\001\002\000\042\005\uff93" +
    "\006\uff93\007\uff93\014\uff93\015\uff93\016\uff93\017\uff93\022" +
    "\uff93\024\uff93\025\uff93\027\uff93\030\uff93\033\uff93\047\uff93" +
    "\053\uff93\055\uff93\001\002\000\042\005\uff8a\006\uff8a\007" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\022\uff8a\024\uff8a" +
    "\025\uff8a\027\uff8a\030\uff8a\033\uff8a\047\uff8a\053\uff8a\055" +
    "\uff8a\001\002\000\042\005\uff95\006\uff95\007\uff95\014\uff95" +
    "\015\uff95\016\uff95\017\uff95\022\uff95\024\uff95\025\uff95\027" +
    "\uff95\030\uff95\033\uff95\047\uff95\053\uff95\055\uff95\001\002" +
    "\000\042\005\uff91\006\uff91\007\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\022\uff91\024\uff91\025\uff91\027\uff91\030\uff91" +
    "\033\uff91\047\uff91\053\uff91\055\uff91\001\002\000\004\055" +
    "\064\001\002\000\042\005\uff92\006\uff92\007\uff92\014\uff92" +
    "\015\uff92\016\uff92\017\uff92\022\uff92\024\uff92\025\uff92\027" +
    "\uff92\030\uff92\033\uff92\047\uff92\053\uff92\055\uff92\001\002" +
    "\000\042\005\uff8b\006\uff8b\007\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\022\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b" +
    "\033\uff8b\047\uff8b\053\uff8b\055\uff8b\001\002\000\042\005" +
    "\uff8c\006\uff8c\007\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\022\uff8c\024\uff8c\025\uff8c\027\uff8c\030\uff8c\033\uff8c\047" +
    "\uff8c\053\uff8c\055\uff8c\001\002\000\104\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\033\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8" +
    "\056\uffd8\057\uffd8\074\uffd8\075\uffd8\077\uffd8\001\002\000" +
    "\004\007\uffcf\001\002\000\016\005\041\027\040\030\uffda" +
    "\033\045\047\uffda\053\uffda\001\002\000\010\030\uffde\047" +
    "\uffde\053\uffde\001\002\000\026\005\061\014\047\015\062" +
    "\016\050\017\052\022\054\024\055\025\063\027\040\033" +
    "\045\001\002\000\040\005\uffd6\006\uffd6\007\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\022\uffd6\024\uffd6\025\uffd6\027" +
    "\uffd6\030\uffd6\033\uffd6\047\uffd6\053\uffd6\001\002\000\040" +
    "\005\uffd7\006\uffd7\007\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\022\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\033\uffd7" +
    "\047\uffd7\053\uffd7\001\002\000\010\030\uffdb\047\uffdb\053" +
    "\uffdb\001\002\000\026\005\061\014\047\015\062\016\050" +
    "\017\052\022\054\024\055\025\063\027\040\033\045\001" +
    "\002\000\010\030\uffdc\047\uffdc\053\uffdc\001\002\000\004" +
    "\014\077\001\002\000\004\030\100\001\002\000\022\005" +
    "\061\014\047\015\062\016\050\017\052\022\054\024\055" +
    "\025\063\001\002\000\004\055\102\001\002\000\104\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\047\uffd9\050\uffd9\051\uffd9\053" +
    "\uffd9\054\uffd9\056\uffd9\057\uffd9\074\uffd9\075\uffd9\077\uffd9" +
    "\001\002\000\044\002\ufff3\005\ufff3\032\ufff3\034\ufff3\042" +
    "\ufff3\045\ufff3\053\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\001" +
    "\002\000\056\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\056\uffb5" +
    "\057\uffb5\074\uffb5\075\uffb5\077\uffb5\001\002\000\100\005" +
    "\110\010\uffc0\011\122\012\uffc0\013\uffc0\023\131\026\uffc0" +
    "\027\040\030\uffc0\033\045\037\107\040\uffc0\041\uffc0\042" +
    "\007\043\uffc0\044\116\046\114\050\uffc0\051\uffc0\054\uffc0" +
    "\056\105\057\uffc0\061\124\062\106\063\117\064\132\065" +
    "\113\066\121\074\uffc0\075\uffc0\077\uffc0\001\002\000\056" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\026\uffbb\030" +
    "\uffbb\031\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\053\uffbb\054\uffbb\056\uffbb\057\uffbb\074" +
    "\uffbb\075\uffbb\077\uffbb\001\002\000\004\046\176\001\002" +
    "\000\060\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\020" +
    "\173\026\uffa0\030\uffa0\031\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0\054\uffa0\056" +
    "\uffa0\057\uffa0\074\uffa0\075\uffa0\077\uffa0\001\002\000\056" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\053\uffb6\054\uffb6\056\uffb6\057\uffb6\074" +
    "\uffb6\075\uffb6\077\uffb6\001\002\000\046\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\026\uffc2\030\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\047\uffc2\050\uffc2\051\uffc2\054\uffc2\057\uffc2" +
    "\074\uffc2\075\uffc2\077\uffc2\001\002\000\056\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\026\uffb2\030\uffb2\031\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\053\uffb2\054\uffb2\056\uffb2\057\uffb2\074\uffb2\075\uffb2" +
    "\077\uffb2\001\002\000\040\005\110\011\122\023\131\027" +
    "\040\033\045\037\107\042\007\044\116\046\114\061\124" +
    "\062\106\063\117\064\132\065\113\066\121\001\002\000" +
    "\056\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\026\uffbc" +
    "\030\uffbc\031\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\056\uffbc\057\uffbc" +
    "\074\uffbc\075\uffbc\077\uffbc\001\002\000\056\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\026\uffc7\030\uffc7\031\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7\074\uffc7\075\uffc7" +
    "\077\uffc7\001\002\000\056\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\026\uffb9\030\uffb9\031\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054" +
    "\uffb9\056\uffb9\057\uffb9\074\uffb9\075\uffb9\077\uffb9\001\002" +
    "\000\052\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\026" +
    "\uffd0\030\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\054\uffd0\056\uffd0\057\uffd0\074\uffd0\075" +
    "\uffd0\077\uffd0\001\002\000\056\007\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\026\uffb1\030\uffb1\031\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1" +
    "\054\uffb1\056\uffb1\057\uffb1\074\uffb1\075\uffb1\077\uffb1\001" +
    "\002\000\006\005\166\061\165\001\002\000\056\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\026\uffb4\030\uffb4\031" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\053\uffb4\054\uffb4\056\uffb4\057\uffb4\074\uffb4\075" +
    "\uffb4\077\uffb4\001\002\000\056\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\026\uffa2\030\uffa2\031\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\047\uffa2\050\uffa2\051\uffa2\053\uffa2" +
    "\054\uffa2\056\uffa2\057\uffa2\074\uffa2\075\uffa2\077\uffa2\001" +
    "\002\000\050\007\uffc1\010\136\011\163\012\146\013\150" +
    "\026\143\030\uffc1\040\134\041\137\043\152\047\uffc1\050" +
    "\uffc1\051\140\054\147\056\105\057\uffc1\074\156\075\154" +
    "\077\142\001\002\000\052\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\026\uffd1\030\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1\056\uffd1\057" +
    "\uffd1\074\uffd1\075\uffd1\077\uffd1\001\002\000\042\007\uffe5" +
    "\010\136\011\151\012\146\013\150\026\143\030\145\040" +
    "\134\041\137\043\152\050\144\051\140\054\147\074\156" +
    "\075\154\077\142\001\002\000\056\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\026\uffb7\030\uffb7\031\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\047\uffb7\050\uffb7\051\uffb7\053" +
    "\uffb7\054\uffb7\056\uffb7\057\uffb7\074\uffb7\075\uffb7\077\uffb7" +
    "\001\002\000\056\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\026\uffb8\030\uffb8\031\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\056" +
    "\uffb8\057\uffb8\074\uffb8\075\uffb8\077\uffb8\001\002\000\056" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\026\uffba\030" +
    "\uffba\031\uffba\040\uffba\041\uffba\042\uffba\043\uffba\047\uffba" +
    "\050\uffba\051\uffba\053\uffba\054\uffba\056\uffba\057\uffba\074" +
    "\uffba\075\uffba\077\uffba\001\002\000\042\005\uffb0\011\uffb0" +
    "\023\uffb0\027\uffb0\033\uffb0\037\uffb0\042\uffb0\044\uffb0\046" +
    "\uffb0\056\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\001\002\000\042\005\uff99\011\uff99\023\uff99\027" +
    "\uff99\033\uff99\037\uff99\042\uff99\044\uff99\046\uff99\056\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\001" +
    "\002\000\042\005\uffa9\011\uffa9\023\uffa9\027\uffa9\033\uffa9" +
    "\037\uffa9\042\uffa9\044\uffa9\046\uffa9\056\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002\000\042" +
    "\005\uffae\011\uffae\023\uffae\027\uffae\033\uffae\037\uffae\042" +
    "\uffae\044\uffae\046\uffae\056\uffae\061\uffae\062\uffae\063\uffae" +
    "\064\uffae\065\uffae\066\uffae\001\002\000\042\005\uff98\011" +
    "\uff98\023\uff98\027\uff98\033\uff98\037\uff98\042\uff98\044\uff98" +
    "\046\uff98\056\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\066\uff98\001\002\000\042\005\uff96\011\uff96\023\uff96" +
    "\027\uff96\033\uff96\037\uff96\042\uff96\044\uff96\046\uff96\056" +
    "\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\001\002\000\042\005\uffa8\011\uffa8\023\uffa8\027\uffa8\033" +
    "\uffa8\037\uffa8\042\uffa8\044\uffa8\046\uffa8\056\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\001\002\000" +
    "\042\005\uff9c\011\uff9c\023\uff9c\027\uff9c\033\uff9c\037\uff9c" +
    "\042\uff9c\044\uff9c\046\uff9c\056\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\042\005\uffaa" +
    "\011\uffaa\023\uffaa\027\uffaa\033\uffaa\037\uffaa\042\uffaa\044" +
    "\uffaa\046\uffaa\056\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\001\002\000\042\005\uffbd\011\uffbd\023" +
    "\uffbd\027\uffbd\033\uffbd\037\uffbd\042\uffbd\044\uffbd\046\uffbd" +
    "\056\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\001\002\000\042\005\uffbe\011\uffbe\023\uffbe\027\uffbe" +
    "\033\uffbe\037\uffbe\042\uffbe\044\uffbe\046\uffbe\056\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002" +
    "\000\042\005\uffac\011\uffac\023\uffac\027\uffac\033\uffac\037" +
    "\uffac\042\uffac\044\uffac\046\uffac\056\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\001\002\000\042\005" +
    "\uff9d\011\uff9d\023\uff9d\027\uff9d\033\uff9d\037\uff9d\042\uff9d" +
    "\044\uff9d\046\uff9d\056\uff9d\061\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\066\uff9d\001\002\000\042\005\uffab\011\uffab" +
    "\023\uffab\027\uffab\033\uffab\037\uffab\042\uffab\044\uffab\046" +
    "\uffab\056\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\001\002\000\042\005\uffad\011\uffad\023\uffad\027" +
    "\uffad\033\uffad\037\uffad\042\uffad\044\uffad\046\uffad\056\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\001" +
    "\002\000\042\005\uff97\011\uff97\023\uff97\027\uff97\033\uff97" +
    "\037\uff97\042\uff97\044\uff97\046\uff97\056\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\001\002\000\042" +
    "\005\uffaf\011\uffaf\023\uffaf\027\uffaf\033\uffaf\037\uffaf\042" +
    "\uffaf\044\uffaf\046\uffaf\056\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\001\002\000\042\005\uff9e\011" +
    "\uff9e\023\uff9e\027\uff9e\033\uff9e\037\uff9e\042\uff9e\044\uff9e" +
    "\046\uff9e\056\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\001\002\000\042\005\110\011\122\023\131" +
    "\027\040\033\045\037\107\042\007\044\116\046\114\056" +
    "\105\061\124\062\106\063\117\064\132\065\113\066\121" +
    "\001\002\000\042\005\uff9f\011\uff9f\023\uff9f\027\uff9f\033" +
    "\uff9f\037\uff9f\042\uff9f\044\uff9f\046\uff9f\056\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\001\002\000" +
    "\046\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\026\uffc5" +
    "\030\uffc5\040\uffc5\041\uffc5\043\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\054\uffc5\057\uffc5\074\uffc5\075\uffc5\077\uffc5\001\002" +
    "\000\050\007\uffc6\010\136\011\163\012\146\013\150\026" +
    "\143\030\uffc6\040\134\041\137\043\152\047\uffc6\050\uffc6" +
    "\051\140\054\147\056\105\057\uffc6\074\156\075\154\077" +
    "\142\001\002\000\040\005\110\011\122\023\131\027\040" +
    "\033\045\037\107\042\007\044\116\046\114\061\124\062" +
    "\106\063\117\064\132\065\113\066\121\001\002\000\046" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\026\uffc4\030" +
    "\uffc4\040\uffc4\041\uffc4\043\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\054\uffc4\057\uffc4\074\uffc4\075\uffc4\077\uffc4\001\002\000" +
    "\040\005\uffad\011\uffad\023\uffad\027\uffad\033\uffad\037\uffad" +
    "\042\uffad\044\uffad\046\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\001\002\000\052\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\026\uffd2\030\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2" +
    "\056\uffd2\057\uffd2\074\uffd2\075\uffd2\077\uffd2\001\002\000" +
    "\056\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\026\uffa4" +
    "\030\uffa4\031\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\053\uffa4\054\uffa4\056\uffa4\057\uffa4" +
    "\074\uffa4\075\uffa4\077\uffa4\001\002\000\056\007\uffa3\010" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\026\uffa3\030\uffa3\031\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\053\uffa3\054\uffa3\056\uffa3\057\uffa3\074\uffa3\075\uffa3" +
    "\077\uffa3\001\002\000\052\007\uffd5\010\136\011\163\012" +
    "\146\013\150\026\143\030\uffd5\040\134\041\137\042\uffd5" +
    "\043\152\047\uffd5\050\uffd5\051\140\054\147\056\uffd5\057" +
    "\uffd5\074\156\075\154\077\142\001\002\000\046\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\026\uffc3\030\uffc3\040" +
    "\uffc3\041\uffc3\043\uffc3\047\uffc3\050\uffc3\051\uffc3\054\uffc3" +
    "\057\uffc3\074\uffc3\075\uffc3\077\uffc3\001\002\000\036\010" +
    "\136\011\163\012\146\013\150\026\143\040\134\041\137" +
    "\043\152\047\172\051\140\054\147\074\156\075\154\077" +
    "\142\001\002\000\052\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\026\uffd3\030\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\054\uffd3\056\uffd3\057\uffd3" +
    "\074\uffd3\075\uffd3\077\uffd3\001\002\000\006\005\174\021" +
    "\175\001\002\000\056\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\026\uffb3\030\uffb3\031\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054\uffb3" +
    "\056\uffb3\057\uffb3\074\uffb3\075\uffb3\077\uffb3\001\002\000" +
    "\056\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\026\uffa1" +
    "\030\uffa1\031\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\053\uffa1\054\uffa1\056\uffa1\057\uffa1" +
    "\074\uffa1\075\uffa1\077\uffa1\001\002\000\040\005\110\011" +
    "\122\023\131\027\040\033\045\037\107\042\007\044\116" +
    "\046\114\061\124\062\106\063\117\064\132\065\113\066" +
    "\121\001\002\000\036\010\136\011\163\012\146\013\150" +
    "\026\143\040\134\041\137\043\152\047\200\051\140\054" +
    "\147\074\156\075\154\077\142\001\002\000\052\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\026\uffd4\030\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\054\uffd4\056\uffd4\057\uffd4\074\uffd4\075\uffd4\077\uffd4\001" +
    "\002\000\042\010\136\011\151\012\146\013\150\026\143" +
    "\030\145\040\134\041\137\043\152\050\144\051\140\054" +
    "\147\057\202\074\156\075\154\077\142\001\002\000\046" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\026\uffbf\030" +
    "\uffbf\040\uffbf\041\uffbf\043\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\054\uffbf\057\uffbf\074\uffbf\075\uffbf\077\uffbf\001\002\000" +
    "\004\046\204\001\002\000\014\005\041\027\040\030\uffda" +
    "\033\045\047\uffda\001\002\000\006\030\066\047\206\001" +
    "\002\000\004\052\ufff6\001\002\000\004\007\uffe6\001\002" +
    "\000\030\005\016\032\015\034\011\042\007\045\026\053" +
    "\ufff4\067\020\072\024\100\013\102\005\105\030\001\002" +
    "\000\036\005\016\032\015\034\011\042\007\045\026\053" +
    "\ufff5\067\020\070\ufff5\071\ufff5\072\024\100\013\101\ufff5" +
    "\102\005\105\030\001\002\000\004\053\213\001\002\000" +
    "\006\007\215\031\214\001\002\000\026\005\061\014\047" +
    "\015\062\016\050\017\052\022\054\024\055\025\063\027" +
    "\040\033\045\001\002\000\010\002\ufff9\103\ufff9\104\ufff9" +
    "\001\002\000\004\007\217\001\002\000\010\002\ufff8\103" +
    "\ufff8\104\ufff8\001\002\000\026\005\016\032\015\034\011" +
    "\042\007\045\026\067\020\072\024\100\013\102\005\105" +
    "\030\001\002\000\030\005\016\032\015\034\011\042\007" +
    "\045\026\053\222\067\020\072\024\100\013\102\005\105" +
    "\030\001\002\000\004\007\223\001\002\000\032\002\ufff7" +
    "\005\ufff7\032\ufff7\034\ufff7\042\ufff7\045\ufff7\067\ufff7\072" +
    "\ufff7\100\ufff7\102\ufff7\104\ufff7\105\ufff7\001\002\000\004" +
    "\002\000\001\002\000\100\005\110\010\uffc0\011\122\012" +
    "\uffc0\013\uffc0\023\131\026\uffc0\027\040\030\uffc0\033\045" +
    "\037\107\040\uffc0\041\uffc0\042\007\043\uffc0\044\116\046" +
    "\114\047\uffc0\050\uffc0\051\uffc0\054\uffc0\056\105\061\124" +
    "\062\106\063\117\064\132\065\113\066\121\074\uffc0\075" +
    "\uffc0\077\uffc0\001\002\000\042\010\136\011\151\012\146" +
    "\013\150\026\143\030\145\040\134\041\137\043\152\047" +
    "\227\050\144\051\140\054\147\074\156\075\154\077\142" +
    "\001\002\000\004\073\230\001\002\000\032\005\016\032" +
    "\015\034\011\042\007\045\026\067\020\070\ufff4\071\ufff4" +
    "\072\024\100\013\102\005\105\030\001\002\000\006\070" +
    "\232\071\233\001\002\000\044\002\uffef\005\uffef\032\uffef" +
    "\034\uffef\042\uffef\045\uffef\053\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef" +
    "\105\uffef\001\002\000\026\005\016\032\015\034\011\042" +
    "\007\045\026\067\020\072\024\100\013\102\005\105\030" +
    "\001\002\000\030\005\016\032\015\034\011\042\007\045" +
    "\026\067\020\070\235\072\024\100\013\102\005\105\030" +
    "\001\002\000\044\002\ufff0\005\ufff0\032\ufff0\034\ufff0\042" +
    "\ufff0\045\ufff0\053\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0" +
    "\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\001" +
    "\002\000\100\005\110\007\uffc0\010\uffc0\011\122\012\uffc0" +
    "\013\uffc0\023\131\026\uffc0\027\040\030\uffc0\033\045\037" +
    "\107\040\uffc0\041\uffc0\042\007\043\uffc0\044\116\046\114" +
    "\050\uffc0\051\uffc0\054\uffc0\056\105\061\124\062\106\063" +
    "\117\064\132\065\113\066\121\074\uffc0\075\uffc0\077\uffc0" +
    "\001\002\000\026\005\061\014\047\015\062\016\050\017" +
    "\052\022\054\024\055\025\063\027\040\033\045\001\002" +
    "\000\026\005\061\014\047\015\062\016\050\017\052\022" +
    "\054\024\055\025\063\027\040\033\045\001\002\000\042" +
    "\007\uffe2\010\136\011\151\012\146\013\150\026\143\030" +
    "\145\040\134\041\137\043\152\050\144\051\140\054\147" +
    "\074\156\075\154\077\142\001\002\000\004\006\243\001" +
    "\002\000\100\005\110\007\uffc0\010\uffc0\011\122\012\uffc0" +
    "\013\uffc0\023\131\026\uffc0\027\040\030\uffc0\033\045\037" +
    "\107\040\uffc0\041\uffc0\042\007\043\uffc0\044\116\046\114" +
    "\050\uffc0\051\uffc0\054\uffc0\056\105\061\124\062\106\063" +
    "\117\064\132\065\113\066\121\074\uffc0\075\uffc0\077\uffc0" +
    "\001\002\000\042\007\uffe9\010\136\011\151\012\146\013" +
    "\150\026\143\030\145\040\134\041\137\043\152\050\144" +
    "\051\140\054\147\074\156\075\154\077\142\001\002\000" +
    "\006\006\246\007\uffea\001\002\000\102\005\110\007\uffc0" +
    "\010\uffc0\011\122\012\uffc0\013\uffc0\023\131\026\uffc0\027" +
    "\040\030\uffc0\033\045\037\107\040\uffc0\041\uffc0\042\007" +
    "\043\uffc0\044\116\046\114\050\uffc0\051\uffc0\052\250\054" +
    "\uffc0\056\105\061\124\062\106\063\117\064\132\065\113" +
    "\066\121\074\uffc0\075\uffc0\077\uffc0\001\002\000\004\007" +
    "\uffeb\001\002\000\036\005\110\011\122\023\131\030\uffcb" +
    "\042\007\044\116\052\255\053\uffcb\061\124\062\106\063" +
    "\117\064\132\065\113\066\121\001\002\000\042\007\uffec" +
    "\010\136\011\151\012\146\013\150\026\143\030\145\040" +
    "\134\041\137\043\152\050\144\051\140\054\147\074\156" +
    "\075\154\077\142\001\002\000\006\030\uffcc\053\uffcc\001" +
    "\002\000\006\030\265\053\266\001\002\000\004\031\263" +
    "\001\002\000\032\005\110\011\122\023\131\042\007\044" +
    "\116\053\257\061\124\062\106\063\117\064\132\065\113" +
    "\066\121\001\002\000\004\031\260\001\002\000\006\030" +
    "\uffc9\053\uffc9\001\002\000\030\005\110\011\122\023\131" +
    "\042\007\044\116\061\124\062\106\063\117\064\132\065" +
    "\113\066\121\001\002\000\004\053\262\001\002\000\006" +
    "\030\uffc8\053\uffc8\001\002\000\030\005\110\011\122\023" +
    "\131\042\007\044\116\061\124\062\106\063\117\064\132" +
    "\065\113\066\121\001\002\000\006\030\uffca\053\uffca\001" +
    "\002\000\032\005\110\011\122\023\131\042\007\044\116" +
    "\052\255\061\124\062\106\063\117\064\132\065\113\066" +
    "\121\001\002\000\004\007\uffce\001\002\000\006\030\uffcd" +
    "\053\uffcd\001\002\000\042\007\uffe8\010\136\011\151\012" +
    "\146\013\150\026\143\030\145\040\134\041\137\043\152" +
    "\050\144\051\140\054\147\074\156\075\154\077\142\001" +
    "\002\000\042\007\uffe4\010\136\011\151\012\146\013\150" +
    "\026\143\030\145\040\134\041\137\043\152\050\144\051" +
    "\140\054\147\074\156\075\154\077\142\001\002\000\044" +
    "\002\uffee\005\uffee\032\uffee\034\uffee\042\uffee\045\uffee\053" +
    "\uffee\067\uffee\070\uffee\071\uffee\072\uffee\100\uffee\101\uffee" +
    "\102\uffee\103\uffee\104\uffee\105\uffee\001\002\000\004\101" +
    "\274\001\002\000\044\002\ufff1\005\ufff1\032\ufff1\034\ufff1" +
    "\042\ufff1\045\ufff1\053\ufff1\067\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\001\002\000\026\005\061\014\047\015\062\016\050\017" +
    "\052\022\054\024\055\025\063\027\040\033\045\001\002" +
    "\000\004\007\uffe1\001\002\000\036\010\136\011\163\012" +
    "\146\013\150\026\143\040\134\041\137\042\300\043\152" +
    "\051\140\054\147\074\156\075\154\077\142\001\002\000" +
    "\004\005\301\001\002\000\004\046\302\001\002\000\100" +
    "\005\110\010\uffc0\011\122\012\uffc0\013\uffc0\023\131\026" +
    "\uffc0\027\040\030\uffc0\033\045\037\107\040\uffc0\041\uffc0" +
    "\042\007\043\uffc0\044\116\046\114\047\uffc0\050\uffc0\051" +
    "\uffc0\054\uffc0\056\105\061\124\062\106\063\117\064\132" +
    "\065\113\066\121\074\uffc0\075\uffc0\077\uffc0\001\002\000" +
    "\042\010\136\011\151\012\146\013\150\026\143\030\145" +
    "\040\134\041\137\043\152\047\304\050\144\051\140\054" +
    "\147\074\156\075\154\077\142\001\002\000\056\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\026\uffa7\030\uffa7\031" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\053\uffa7\054\uffa7\056\uffa7\057\uffa7\074\uffa7\075" +
    "\uffa7\077\uffa7\001\002\000\042\007\uffe3\010\136\011\151" +
    "\012\146\013\150\026\143\030\145\040\134\041\137\043" +
    "\152\050\144\051\140\054\147\074\156\075\154\077\142" +
    "\001\002\000\006\002\uffff\104\025\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\030\002\026\003\005\006\013\011\007\012" +
    "\022\014\030\026\016\035\011\054\031\057\020\060\003" +
    "\001\001\000\024\002\026\003\005\006\013\011\007\012" +
    "\022\014\305\026\016\035\011\054\031\001\001\000\026" +
    "\007\124\026\110\037\127\043\114\047\304\050\111\051" +
    "\117\052\103\053\122\055\125\001\001\000\002\001\001" +
    "\000\022\007\276\026\110\037\127\043\114\051\117\052" +
    "\103\053\122\055\125\001\001\000\002\001\001\000\020" +
    "\021\055\022\052\023\056\024\050\025\071\055\070\056" +
    "\274\001\001\000\002\001\001\000\020\002\210\003\005" +
    "\006\013\013\272\026\016\035\011\054\031\001\001\000" +
    "\002\001\001\000\026\007\124\026\110\037\127\043\114" +
    "\047\270\050\111\051\117\052\103\053\122\055\125\001" +
    "\001\000\026\007\124\026\110\037\127\043\114\047\240" +
    "\050\111\051\117\052\103\053\122\055\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\124\026\110\037\127\043\114\047\126" +
    "\050\111\051\117\052\103\053\122\055\125\001\001\000" +
    "\014\003\102\006\013\026\016\035\011\054\031\001\001" +
    "\000\002\001\001\000\010\011\033\012\022\060\032\001" +
    "\001\000\002\001\001\000\024\002\026\003\005\006\013" +
    "\011\007\012\022\014\034\026\016\035\011\054\031\001" +
    "\001\000\002\001\001\000\006\011\033\012\022\001\001" +
    "\000\002\001\001\000\010\015\042\016\043\055\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\055\022\052\023\056\024\050\025\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\066\055" +
    "\041\001\001\000\002\001\001\000\020\021\055\022\052" +
    "\023\056\024\050\025\071\055\070\056\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\021\055\022\052\023\056\024\050\025\071\055\070\056" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\055\022\052\023\056\024\050\025" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\124\026\110\037" +
    "\127\043\114\047\200\050\111\051\117\052\103\053\122" +
    "\055\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\170\026\110\037\127\043\114\051" +
    "\117\052\103\053\122\055\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\160\033\140\036\134\050\167\053" +
    "\163\001\001\000\002\001\001\000\014\010\132\020\152" +
    "\033\140\036\134\061\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\157\026\110\037\127\043\114\050\156" +
    "\051\117\052\103\053\122\055\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\160\033\140\036\134" +
    "\050\161\053\163\001\001\000\022\007\166\026\110\037" +
    "\127\043\114\051\117\052\103\053\122\055\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\160\033\140" +
    "\036\134\053\163\001\001\000\002\001\001\000\012\010" +
    "\160\033\140\036\134\053\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\176\026\110\037\127\043\114\051\117\052\103" +
    "\053\122\055\125\001\001\000\012\010\160\033\140\036" +
    "\134\053\163\001\001\000\002\001\001\000\014\010\132" +
    "\020\152\033\140\036\134\061\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\204\016\043\055\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\210\003\005\006\013\013\211\026\016" +
    "\035\011\054\031\001\001\000\014\003\102\006\013\026" +
    "\016\035\011\054\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\055\022\052\023\056\024\050\025" +
    "\071\055\070\056\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\220\003\005\006" +
    "\013\026\016\035\011\054\031\001\001\000\014\003\102" +
    "\006\013\026\016\035\011\054\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\124" +
    "\026\110\037\127\043\114\047\225\050\111\051\117\052" +
    "\103\053\122\055\125\001\001\000\014\010\132\020\152" +
    "\033\140\036\134\061\154\001\001\000\002\001\001\000" +
    "\020\002\210\003\005\006\013\013\230\026\016\035\011" +
    "\054\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\233\003\005\006\013\026\016\035\011\054\031" +
    "\001\001\000\014\003\102\006\013\026\016\035\011\054" +
    "\031\001\001\000\002\001\001\000\026\007\124\026\110" +
    "\037\127\043\114\047\267\050\111\051\117\052\103\053" +
    "\122\055\125\001\001\000\020\021\055\022\052\023\056" +
    "\024\050\025\071\055\070\056\244\001\001\000\020\021" +
    "\055\022\052\023\056\024\050\025\071\055\070\056\241" +
    "\001\001\000\014\010\132\020\152\033\140\036\134\061" +
    "\154\001\001\000\002\001\001\000\026\007\124\026\110" +
    "\037\127\043\114\047\243\050\111\051\117\052\103\053" +
    "\122\055\125\001\001\000\014\010\132\020\152\033\140" +
    "\036\134\061\154\001\001\000\002\001\001\000\030\007" +
    "\124\026\110\031\246\037\127\043\114\047\250\050\111" +
    "\051\117\052\103\053\122\055\125\001\001\000\002\001" +
    "\001\000\022\026\110\027\251\030\252\037\127\043\114" +
    "\051\253\052\103\053\122\001\001\000\014\010\132\020" +
    "\152\033\140\036\134\061\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\110\037" +
    "\127\043\114\051\255\052\103\053\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\110\037\127\043" +
    "\114\051\260\052\103\053\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\110\037\127\043\114\051" +
    "\263\052\103\053\122\001\001\000\002\001\001\000\020" +
    "\026\110\027\266\037\127\043\114\051\253\052\103\053" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\132\020\152\033\140\036\134\061\154\001\001\000" +
    "\014\010\132\020\152\033\140\036\134\061\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\055\022\052\023\056\024\050\025\071\055\070" +
    "\056\275\001\001\000\002\001\001\000\012\010\160\033" +
    "\140\036\134\053\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\124\026\110\037\127\043\114\047" +
    "\302\050\111\051\117\052\103\053\122\055\125\001\001" +
    "\000\014\010\132\020\152\033\140\036\134\061\154\001" +
    "\001\000\002\001\001\000\014\010\132\020\152\033\140" +
    "\036\134\061\154\001\001\000\006\011\033\012\022\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= methods main_method methods 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main_method methods 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= methods main_method 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main_method 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methods ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY COL merged_type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_method ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_method",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // special_statement ::= LOOP method_body POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // special_statement ::= IF LPAREN list RPAREN THEN method_body ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // special_statement ::= IF LPAREN list RPAREN THEN method_body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= special_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= IDENTIFIER COL merged_type EQUAL list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= IDENTIFIER COL merged_type EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= IDENTIFIER COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= IDENTIFIER DOT merged_type EQUAL list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= IDENTIFIER EQUAL list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // full_exp ::= PRINT list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // full_exp ::= RETURN list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // full_exp ::= READ list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // full_exp ::= IDENTIFIER list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // full_exp ::= ALIAS merged_type merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // full_exp ::= custom_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter ::= IDENTIFIER COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter ::= complex_type COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // complex_type ::= DICT LPAREN_TRI INT COMMA type RPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // complex_type ::= SEQ LPAREN_TRI type RPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // merged_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("merged_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // merged_type ::= complex_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("merged_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_exp ::= NOT LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_exp ::= simple_exp negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_exp ::= complex_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list ::= list all_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list ::= list all_binary array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // list ::= list all_binary simple_exp array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // list ::= simple_exp array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list ::= array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // array ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // delimitors ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // delimitors ::= CONCAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // value ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // value ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // value ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // value ::= negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // value ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // all_binary ::= operator_binary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_binary",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // all_binary ::= delimitors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_binary",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operator_binary ::= comparison_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_call ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comparison_parameters ::= comparison_parameters boolean_twoway_operators comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparison_parameters ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // negative ::= MINUS INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // negative ::= MINUS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // boolean_twoway_operators ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
