
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\014\004\000\002\002\004\000\002\014" +
    "\003\000\002\014\003\000\002\011\007\000\002\011\011" +
    "\000\002\011\007\000\002\012\007\000\002\013\003\000" +
    "\002\013\002\000\002\002\005\000\002\002\011\000\002" +
    "\002\013\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\006\007\000\002\006\012\000\002\006\014" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\002\000\002\007\005" +
    "\000\002\007\006\000\002\007\005\000\002\007\004\000" +
    "\002\007\003\000\002\035\010\000\002\031\005\000\002" +
    "\030\005\000\002\030\003\000\002\030\002\000\002\027" +
    "\005\000\002\027\004\000\002\027\007\000\002\047\005" +
    "\000\002\047\003\000\002\051\003\000\002\046\005\000" +
    "\002\046\003\000\002\046\002\000\002\020\003\000\002" +
    "\020\003\000\002\040\005\000\002\040\003\000\002\040" +
    "\002\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\037\003\000\002\037\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\026\011\000\002\032\005\000" +
    "\002\032\003\000\002\052\004\000\002\052\004\000\002" +
    "\043\003\000\002\043\005\000\002\043\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\021" +
    "\003\000\002\021\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\022\003\000" +
    "\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\024\005\021\032\022\042\013\045\020\066" +
    "\015\071\023\077\011\101\004\102\007\001\002\000\004" +
    "\051\244\001\002\000\004\051\235\001\002\000\010\002" +
    "\233\101\004\102\007\001\002\000\004\005\221\001\002" +
    "\000\010\002\uffff\101\uffff\102\uffff\001\002\000\022\005" +
    "\021\032\022\042\013\045\020\066\015\071\023\077\011" +
    "\100\ufff8\001\002\000\004\007\215\001\002\000\034\005" +
    "\030\011\041\023\045\037\027\042\013\044\035\046\033" +
    "\060\043\061\026\062\036\063\047\064\032\065\040\001" +
    "\002\000\004\007\uffec\001\002\000\004\046\167\001\002" +
    "\000\022\002\ufffe\005\021\032\022\042\013\045\020\071" +
    "\023\101\ufffe\102\ufffe\001\002\000\032\002\ufff3\005\ufff3" +
    "\032\ufff3\042\ufff3\045\ufff3\052\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\100\ufff3\101\ufff3\102\ufff3\001\002\000\034\005\030" +
    "\011\041\023\045\037\027\042\013\044\035\046\033\060" +
    "\043\061\026\062\036\063\047\064\032\065\040\001\002" +
    "\000\006\006\076\031\075\001\002\000\036\005\030\007" +
    "\uffe8\011\041\023\045\037\027\042\013\044\035\046\033" +
    "\060\043\061\026\062\036\063\047\064\032\065\040\001" +
    "\002\000\006\007\uffe7\060\024\001\002\000\004\007\uffeb" +
    "\001\002\000\052\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\026\uffc3\030\uffc3\031\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\056\uffc3\073" +
    "\uffc3\074\uffc3\076\uffc3\001\002\000\052\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\026\uffc9\030\uffc9\031\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\047\uffc9\050\uffc9\052\uffc9" +
    "\053\uffc9\056\uffc9\073\uffc9\074\uffc9\076\uffc9\001\002\000" +
    "\004\046\072\001\002\000\054\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\020\070\026\uffb2\030\uffb2\031\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\047\uffb2\050\uffb2\052\uffb2" +
    "\053\uffb2\056\uffb2\073\uffb2\074\uffb2\076\uffb2\001\002\000" +
    "\052\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\026\uffc4" +
    "\030\uffc4\031\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\047" +
    "\uffc4\050\uffc4\052\uffc4\053\uffc4\056\uffc4\073\uffc4\074\uffc4" +
    "\076\uffc4\001\002\000\052\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\026\uffc1\030\uffc1\031\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\047\uffc1\050\uffc1\052\uffc1\053\uffc1\056" +
    "\uffc1\073\uffc1\074\uffc1\076\uffc1\001\002\000\034\005\030" +
    "\011\041\023\045\037\027\042\013\044\035\046\033\060" +
    "\043\061\026\062\036\063\047\064\032\065\040\001\002" +
    "\000\052\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\026" +
    "\uffca\030\uffca\031\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\047\uffca\050\uffca\052\uffca\053\uffca\056\uffca\073\uffca\074" +
    "\uffca\076\uffca\001\002\000\052\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\026\uffd3\030\uffd3\031\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\047\uffd3\050\uffd3\052\uffd3\053\uffd3" +
    "\056\uffd3\073\uffd3\074\uffd3\076\uffd3\001\002\000\052\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\026\uffc7\030\uffc7" +
    "\031\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7\050" +
    "\uffc7\052\uffc7\053\uffc7\056\uffc7\073\uffc7\074\uffc7\076\uffc7" +
    "\001\002\000\040\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\026\uffde\040\uffde\041\uffde\042\uffde\043\uffde\047\uffde" +
    "\053\uffde\073\uffde\074\uffde\076\uffde\001\002\000\052\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\026\uffc0\030\uffc0" +
    "\031\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0\050" +
    "\uffc0\052\uffc0\053\uffc0\056\uffc0\073\uffc0\074\uffc0\076\uffc0" +
    "\001\002\000\006\005\065\060\064\001\002\000\052\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\026\uffc2\030\uffc2" +
    "\031\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047\uffc2\050" +
    "\uffc2\052\uffc2\053\uffc2\056\uffc2\073\uffc2\074\uffc2\076\uffc2" +
    "\001\002\000\052\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\026\uffb4\030\uffb4\031\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\047\uffb4\050\uffb4\052\uffb4\053\uffb4\056\uffb4\073" +
    "\uffb4\074\uffb4\076\uffb4\001\002\000\024\007\uffe9\010\056" +
    "\011\051\012\054\013\057\026\053\040\052\041\062\043" +
    "\060\001\002\000\052\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\026\uffc6\030\uffc6\031\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6\056\uffc6" +
    "\073\uffc6\074\uffc6\076\uffc6\001\002\000\052\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\026\uffc5\030\uffc5\031\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\047\uffc5\050\uffc5\052" +
    "\uffc5\053\uffc5\056\uffc5\073\uffc5\074\uffc5\076\uffc5\001\002" +
    "\000\052\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\026" +
    "\uffc8\030\uffc8\031\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\047\uffc8\050\uffc8\052\uffc8\053\uffc8\056\uffc8\073\uffc8\074" +
    "\uffc8\076\uffc8\001\002\000\034\005\uffba\011\uffba\023\uffba" +
    "\037\uffba\042\uffba\044\uffba\046\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\001\002\000\034\005\uffbe" +
    "\011\uffbe\023\uffbe\037\uffbe\042\uffbe\044\uffbe\046\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002" +
    "\000\034\005\uffab\011\uffab\023\uffab\037\uffab\042\uffab\044" +
    "\uffab\046\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\001\002\000\034\005\uffbb\011\uffbb\023\uffbb\037" +
    "\uffbb\042\uffbb\044\uffbb\046\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\001\002\000\034\005\uffbd\011" +
    "\uffbd\023\uffbd\037\uffbd\042\uffbd\044\uffbd\046\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\040\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\026\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\047\uffdf\053\uffdf\073" +
    "\uffdf\074\uffdf\076\uffdf\001\002\000\034\005\uffbf\011\uffbf" +
    "\023\uffbf\037\uffbf\042\uffbf\044\uffbf\046\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\001\002\000\034" +
    "\005\uffbc\011\uffbc\023\uffbc\037\uffbc\042\uffbc\044\uffbc\046" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\001\002\000\034\005\uffa9\011\uffa9\023\uffa9\037\uffa9\042" +
    "\uffa9\044\uffa9\046\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\001\002\000\034\005\030\011\041\023" +
    "\045\037\027\042\013\044\035\046\033\060\043\061\026" +
    "\062\036\063\047\064\032\065\040\001\002\000\034\005" +
    "\uffaa\011\uffaa\023\uffaa\037\uffaa\042\uffaa\044\uffaa\046\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\001" +
    "\002\000\040\007\uffe2\010\056\011\051\012\054\013\057" +
    "\026\053\040\052\041\062\042\uffe2\043\060\047\uffe2\053" +
    "\uffe2\073\uffe2\074\uffe2\076\uffe2\001\002\000\052\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\026\uffb6\030\uffb6\031" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\047\uffb6\050\uffb6" +
    "\052\uffb6\053\uffb6\056\uffb6\073\uffb6\074\uffb6\076\uffb6\001" +
    "\002\000\052\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\047\uffb5\050\uffb5\052\uffb5\053\uffb5\056\uffb5\073\uffb5" +
    "\074\uffb5\076\uffb5\001\002\000\024\010\056\011\051\012" +
    "\054\013\057\026\053\040\052\041\062\043\060\047\067" +
    "\001\002\000\040\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\026\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\047\uffe0" +
    "\053\uffe0\073\uffe0\074\uffe0\076\uffe0\001\002\000\004\021" +
    "\071\001\002\000\052\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\026\uffb3\030\uffb3\031\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\047\uffb3\050\uffb3\052\uffb3\053\uffb3\056\uffb3" +
    "\073\uffb3\074\uffb3\076\uffb3\001\002\000\034\005\030\011" +
    "\041\023\045\037\027\042\013\044\035\046\033\060\043" +
    "\061\026\062\036\063\047\064\032\065\040\001\002\000" +
    "\024\010\056\011\051\012\054\013\057\026\053\040\052" +
    "\041\062\043\060\047\074\001\002\000\040\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\026\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\047\uffe1\053\uffe1\073\uffe1\074\uffe1\076" +
    "\uffe1\001\002\000\026\005\114\014\100\015\116\016\102" +
    "\017\104\022\105\024\110\025\115\027\101\033\107\001" +
    "\002\000\034\005\030\011\041\023\045\037\027\042\013" +
    "\044\035\046\033\060\043\061\026\062\036\063\047\064" +
    "\032\065\040\001\002\000\024\007\uffed\010\056\011\051" +
    "\012\054\013\057\026\053\040\052\041\062\043\060\001" +
    "\002\000\014\006\uffa0\007\uffa0\030\uffa0\047\uffa0\054\uffa0" +
    "\001\002\000\004\053\137\001\002\000\014\006\uffa3\007" +
    "\uffa3\030\uffa3\047\uffa3\054\uffa3\001\002\000\014\006\uffa2" +
    "\007\uffa2\030\uffa2\047\uffa2\054\uffa2\001\002\000\014\006" +
    "\uffa7\007\uffa7\030\uffa7\047\uffa7\054\uffa7\001\002\000\014" +
    "\006\uffa6\007\uffa6\030\uffa6\047\uffa6\054\uffa6\001\002\000" +
    "\014\006\uffa1\007\uffa1\030\uffa1\047\uffa1\054\uffa1\001\002" +
    "\000\004\053\121\001\002\000\014\006\uff9d\007\uff9d\030" +
    "\uff9d\047\uff9d\054\uff9d\001\002\000\014\006\uffa8\007\uffa8" +
    "\030\uffa8\047\uffa8\054\uffa8\001\002\000\014\006\uffa4\007" +
    "\uffa4\030\uffa4\047\uffa4\054\uffa4\001\002\000\006\006\117" +
    "\007\uffee\001\002\000\014\006\uffa5\007\uffa5\030\uffa5\047" +
    "\uffa5\054\uffa5\001\002\000\014\006\uff9f\007\uff9f\030\uff9f" +
    "\047\uff9f\054\uff9f\001\002\000\014\006\uff9e\007\uff9e\030" +
    "\uff9e\047\uff9e\054\uff9e\001\002\000\034\005\030\011\041" +
    "\023\045\037\027\042\013\044\035\046\033\060\043\061" +
    "\026\062\036\063\047\064\032\065\040\001\002\000\024" +
    "\007\ufff1\010\056\011\051\012\054\013\057\026\053\040" +
    "\052\041\062\043\060\001\002\000\022\005\114\014\100" +
    "\015\116\016\102\017\104\022\105\024\110\025\115\001" +
    "\002\000\004\054\123\001\002\000\004\006\124\001\002" +
    "\000\040\005\030\007\uffd0\011\041\023\045\030\uffd0\042" +
    "\013\044\035\050\uffd0\055\125\060\043\061\026\062\036" +
    "\063\047\064\032\065\040\001\002\000\036\005\030\011" +
    "\041\023\045\030\uffd0\042\013\044\035\050\uffd0\056\uffd0" +
    "\060\043\061\026\062\036\063\047\064\032\065\040\001" +
    "\002\000\004\007\ufff0\001\002\000\012\007\uffd1\030\uffd1" +
    "\050\uffd1\056\uffd1\001\002\000\010\007\uffd4\030\131\050" +
    "\133\001\002\000\030\005\uffcf\011\uffcf\023\uffcf\042\uffcf" +
    "\044\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\001\002\000\030\005\030\011\041\023\045\042\013" +
    "\044\035\060\043\061\026\062\036\063\047\064\032\065" +
    "\040\001\002\000\030\005\uffce\011\uffce\023\uffce\042\uffce" +
    "\044\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\001\002\000\012\007\uffd2\030\uffd2\050\uffd2\056\uffd2" +
    "\001\002\000\010\030\131\050\133\056\136\001\002\000" +
    "\004\007\uffd5\001\002\000\004\014\140\001\002\000\004" +
    "\030\141\001\002\000\022\005\114\014\100\015\116\016" +
    "\102\017\104\022\105\024\110\025\115\001\002\000\004" +
    "\054\143\001\002\000\004\006\144\001\002\000\004\051" +
    "\146\001\002\000\004\007\uffef\001\002\000\036\005\030" +
    "\011\041\023\045\030\uffd9\042\013\044\035\051\152\052" +
    "\uffd9\060\043\061\026\062\036\063\047\064\032\065\040" +
    "\001\002\000\006\030\uffda\052\uffda\001\002\000\006\030" +
    "\163\052\162\001\002\000\004\031\160\001\002\000\032" +
    "\005\030\011\041\023\045\042\013\044\035\052\154\060" +
    "\043\061\026\062\036\063\047\064\032\065\040\001\002" +
    "\000\004\031\155\001\002\000\006\030\uffd7\052\uffd7\001" +
    "\002\000\030\005\030\011\041\023\045\042\013\044\035" +
    "\060\043\061\026\062\036\063\047\064\032\065\040\001" +
    "\002\000\004\052\157\001\002\000\006\030\uffd6\052\uffd6" +
    "\001\002\000\030\005\030\011\041\023\045\042\013\044" +
    "\035\060\043\061\026\062\036\063\047\064\032\065\040" +
    "\001\002\000\006\030\uffd8\052\uffd8\001\002\000\004\007" +
    "\uffdc\001\002\000\032\005\030\011\041\023\045\042\013" +
    "\044\035\051\152\060\043\061\026\062\036\063\047\064" +
    "\032\065\040\001\002\000\006\030\uffdb\052\uffdb\001\002" +
    "\000\024\007\uffea\010\056\011\051\012\054\013\057\026" +
    "\053\040\052\041\062\043\060\001\002\000\032\002\ufff4" +
    "\005\ufff4\032\ufff4\042\ufff4\045\ufff4\052\ufff4\067\ufff4\070" +
    "\ufff4\071\ufff4\100\ufff4\101\ufff4\102\ufff4\001\002\000\034" +
    "\005\030\011\041\023\045\037\027\042\013\044\035\046" +
    "\033\060\043\061\026\062\036\063\047\064\032\065\040" +
    "\001\002\000\034\010\056\011\051\012\054\013\057\026" +
    "\053\040\052\041\062\043\060\047\uffb7\053\205\073\202" +
    "\074\201\076\203\001\002\000\004\047\172\001\002\000" +
    "\004\072\173\001\002\000\020\005\021\032\022\042\013" +
    "\045\020\066\015\071\023\077\011\001\002\000\020\005" +
    "\021\032\022\042\013\045\020\067\175\070\176\071\023" +
    "\001\002\000\032\002\ufff6\005\ufff6\032\ufff6\042\ufff6\045" +
    "\ufff6\052\ufff6\067\ufff6\070\ufff6\071\ufff6\100\ufff6\101\ufff6" +
    "\102\ufff6\001\002\000\020\005\021\032\022\042\013\045" +
    "\020\066\015\071\023\077\011\001\002\000\016\005\021" +
    "\032\022\042\013\045\020\067\200\071\023\001\002\000" +
    "\032\002\ufff5\005\ufff5\032\ufff5\042\ufff5\045\ufff5\052\ufff5" +
    "\067\ufff5\070\ufff5\071\ufff5\100\ufff5\101\ufff5\102\ufff5\001" +
    "\002\000\034\005\uffb0\011\uffb0\023\uffb0\037\uffb0\042\uffb0" +
    "\044\uffb0\046\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\001\002\000\034\005\uffb1\011\uffb1\023\uffb1" +
    "\037\uffb1\042\uffb1\044\uffb1\046\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002\000\034\005\uffae" +
    "\011\uffae\023\uffae\037\uffae\042\uffae\044\uffae\046\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\001\002" +
    "\000\034\005\030\011\041\023\045\037\027\042\013\044" +
    "\035\046\033\060\043\061\026\062\036\063\047\064\032" +
    "\065\040\001\002\000\034\005\uffaf\011\uffaf\023\uffaf\037" +
    "\uffaf\042\uffaf\044\uffaf\046\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\001\002\000\024\010\056\011" +
    "\051\012\054\013\057\026\053\040\052\041\062\043\060" +
    "\047\uffb8\001\002\000\024\010\056\011\051\012\054\013" +
    "\057\026\053\040\052\041\062\042\210\043\060\001\002" +
    "\000\004\005\211\001\002\000\004\046\212\001\002\000" +
    "\034\005\030\011\041\023\045\037\027\042\013\044\035" +
    "\046\033\060\043\061\026\062\036\063\047\064\032\065" +
    "\040\001\002\000\004\047\214\001\002\000\052\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\026\uffb9\030\uffb9\031" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\047\uffb9\050\uffb9" +
    "\052\uffb9\053\uffb9\056\uffb9\073\uffb9\074\uffb9\076\uffb9\001" +
    "\002\000\032\002\ufff2\005\ufff2\032\ufff2\042\ufff2\045\ufff2" +
    "\052\ufff2\067\ufff2\070\ufff2\071\ufff2\100\ufff2\101\ufff2\102" +
    "\ufff2\001\002\000\020\005\021\032\022\042\013\045\020" +
    "\052\ufff9\071\023\100\ufff9\001\002\000\004\100\220\001" +
    "\002\000\032\002\ufff7\005\ufff7\032\ufff7\042\ufff7\045\ufff7" +
    "\052\ufff7\067\ufff7\070\ufff7\071\ufff7\100\ufff7\101\ufff7\102" +
    "\ufff7\001\002\000\004\046\222\001\002\000\010\005\223" +
    "\030\uffe3\047\uffe3\001\002\000\004\031\231\001\002\000" +
    "\006\030\226\047\227\001\002\000\006\030\uffe5\047\uffe5" +
    "\001\002\000\010\005\223\030\uffe3\047\uffe3\001\002\000" +
    "\004\051\ufffa\001\002\000\006\030\uffe6\047\uffe6\001\002" +
    "\000\022\005\114\014\100\015\116\016\102\017\104\022" +
    "\105\024\110\025\115\001\002\000\006\030\uffe4\047\uffe4" +
    "\001\002\000\004\002\000\001\002\000\010\002\001\101" +
    "\001\102\001\001\002\000\022\005\021\032\022\042\013" +
    "\045\020\052\ufff8\066\015\071\023\077\011\001\002\000" +
    "\004\052\237\001\002\000\006\007\241\031\240\001\002" +
    "\000\022\005\114\014\100\015\116\016\102\017\104\022" +
    "\105\024\110\025\115\001\002\000\010\002\ufffd\101\ufffd" +
    "\102\ufffd\001\002\000\004\007\243\001\002\000\010\002" +
    "\ufffc\101\ufffc\102\ufffc\001\002\000\020\005\021\032\022" +
    "\042\013\045\020\066\015\071\023\077\011\001\002\000" +
    "\016\005\021\032\022\042\013\045\020\052\246\071\023" +
    "\001\002\000\004\007\247\001\002\000\010\002\ufffb\101" +
    "\ufffb\102\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\020\002\015\003\016\006\011\011\007\012" +
    "\004\014\005\026\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\233\012\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\215\003\016\006\011" +
    "\013\216\026\013\001\001\000\002\001\001\000\020\007" +
    "\206\026\030\037\045\043\033\050\036\051\024\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\165\006\011\026\013\001\001\000\002\001\001\000\020" +
    "\007\164\026\030\037\045\043\033\050\036\051\024\052" +
    "\041\001\001\000\002\001\001\000\020\007\043\026\030" +
    "\037\045\043\033\050\036\051\024\052\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\065\026\030\037\045" +
    "\043\033\050\036\051\024\052\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\060\036\047\052\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\062" +
    "\026\030\037\045\043\033\050\036\051\024\052\041\001" +
    "\001\000\002\001\001\000\010\010\060\036\047\052\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\060\036\047\052\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\072\026\030\037" +
    "\045\043\033\050\036\051\024\052\041\001\001\000\010" +
    "\010\060\036\047\052\054\001\001\000\002\001\001\000" +
    "\014\021\110\022\105\023\111\024\102\025\112\001\001" +
    "\000\020\007\076\026\030\037\045\043\033\050\036\051" +
    "\024\052\041\001\001\000\010\010\060\036\047\052\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\117\026\030\037\045\043\033\050\036\051\024\052\041" +
    "\001\001\000\010\010\060\036\047\052\054\001\001\000" +
    "\014\021\110\022\105\023\111\024\102\025\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\026\030\037" +
    "\045\043\033\046\127\047\125\050\126\051\024\052\041" +
    "\001\001\000\020\026\030\037\045\043\033\046\134\050" +
    "\126\051\024\052\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\131\001\001\000\002\001\001\000" +
    "\016\026\030\037\045\043\033\050\133\051\024\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\110\022\105\023\111\024\102\025" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\144\001\001\000\002\001\001\000\022\026\030\027" +
    "\146\030\147\037\045\043\033\050\150\051\024\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\030\037\045\043\033\050\152\051\024" +
    "\052\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\026\030\037\045\043\033\050\155\051\024\052\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\026" +
    "\030\037\045\043\033\050\160\051\024\052\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\026\030\027" +
    "\163\037\045\043\033\050\150\051\024\052\041\001\001" +
    "\000\002\001\001\000\010\010\060\036\047\052\054\001" +
    "\001\000\002\001\001\000\022\007\167\026\030\032\170" +
    "\037\045\043\033\050\036\051\024\052\041\001\001\000" +
    "\012\010\060\033\203\036\047\052\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\173\003\016\006" +
    "\011\026\013\001\001\000\010\003\165\006\011\026\013" +
    "\001\001\000\002\001\001\000\012\002\176\003\016\006" +
    "\011\026\013\001\001\000\010\003\165\006\011\026\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\205\026\030\037\045" +
    "\043\033\050\036\051\024\052\041\001\001\000\002\001" +
    "\001\000\010\010\060\036\047\052\054\001\001\000\010" +
    "\010\060\036\047\052\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\167\026\030\032\212\037\045" +
    "\043\033\050\036\051\024\052\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\165" +
    "\006\011\026\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\223\016\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\110\022\105\023\111\024\102\025\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\215\003\016\006\011\013\235\026\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\110" +
    "\022\105\023\111\024\102\025\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\244" +
    "\003\016\006\011\026\013\001\001\000\010\003\165\006" +
    "\011\026\013\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= methods EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // methods ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_declaration ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statements ::= LOOP method_body POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= IF LPAREN comparison RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= IF LPAREN comparison RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // full_exp ::= IDENTIFIER COL type EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // full_exp ::= IDENTIFIER COL SEQ LPAREN_TRI type RPAREN_TRI EQUAL array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // full_exp ::= IDENTIFIER COL DICT LPAREN_TRI INT COMMA type RPAREN_TRI EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // full_exp ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // full_exp ::= IDENTIFIER EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= PRINT simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= RETURN simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_exp ::= NOT LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_exp ::= simple_exp negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array ::= list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list ::= list delimitors value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // delimitors ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // delimitors ::= CONCAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comparables_list ::= comparables_list COMMA simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comparables_list ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparables_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_call ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comparison ::= simple_exp comparison_operators simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comparison ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // negative ::= MINUS INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // negative ::= MINUS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
