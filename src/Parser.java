
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\014\004\000\002\002\004\000\002\014" +
    "\003\000\002\011\007\000\002\011\011\000\002\011\007" +
    "\000\002\012\007\000\002\013\003\000\002\013\002\000" +
    "\002\002\005\000\002\002\011\000\002\002\013\000\002" +
    "\002\004\000\002\002\003\000\002\003\004\000\002\006" +
    "\007\000\002\006\012\000\002\006\014\000\002\006\005" +
    "\000\002\006\007\000\002\006\005\000\002\006\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\002\000\002\007\006" +
    "\000\002\007\010\000\002\007\005\000\002\007\006\000" +
    "\002\007\005\000\002\007\003\000\002\040\005\000\002" +
    "\040\005\000\002\040\003\000\002\033\010\000\002\027" +
    "\005\000\002\026\005\000\002\026\003\000\002\026\002" +
    "\000\002\025\005\000\002\025\004\000\002\025\007\000" +
    "\002\043\005\000\002\043\003\000\002\045\003\000\002" +
    "\042\005\000\002\042\003\000\002\042\002\000\002\036" +
    "\005\000\002\036\003\000\002\036\002\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\035\003\000\002\035" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\024\011\000\002\030\005\000\002\030\003\000\002" +
    "\041\003\000\002\041\005\000\002\041\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\023\003\000\002" +
    "\023\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\003\000\002\022\003" +
    "\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\100\007\101\004\001\002\000\004\005" +
    "\245\001\002\000\010\002\243\100\007\101\004\001\002" +
    "\000\004\050\234\001\002\000\004\050\011\001\002\000" +
    "\010\002\uffff\100\uffff\101\uffff\001\002\000\020\005\022" +
    "\032\023\042\014\045\021\065\017\070\024\076\012\001" +
    "\002\000\022\005\022\032\023\042\014\045\021\065\017" +
    "\070\024\076\012\077\ufff9\001\002\000\004\007\230\001" +
    "\002\000\032\005\036\023\031\037\037\042\014\044\032" +
    "\046\042\057\045\060\026\061\044\062\027\063\030\064" +
    "\035\001\002\000\004\007\uffec\001\002\000\016\005\022" +
    "\032\023\042\014\045\021\051\220\070\024\001\002\000" +
    "\004\046\177\001\002\000\024\005\ufff4\032\ufff4\042\ufff4" +
    "\045\ufff4\051\ufff4\066\ufff4\067\ufff4\070\ufff4\077\ufff4\001" +
    "\002\000\032\005\036\023\031\037\037\042\014\044\032" +
    "\046\042\057\045\060\026\061\044\062\027\063\030\064" +
    "\035\001\002\000\006\006\107\031\106\001\002\000\034" +
    "\005\036\007\uffe8\023\031\037\037\042\014\044\032\046" +
    "\042\057\045\060\026\061\044\062\027\063\030\064\035" +
    "\001\002\000\006\007\uffe7\057\025\001\002\000\004\007" +
    "\uffeb\001\002\000\050\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\026\uffc7\030\uffc7\031\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\047\uffc7\051\uffc7\052\uffc7\055\uffc7\072\uffc7" +
    "\073\uffc7\075\uffc7\001\002\000\050\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\026\uffc6\030\uffc6\031\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\047\uffc6\051\uffc6\052\uffc6\055" +
    "\uffc6\072\uffc6\073\uffc6\075\uffc6\001\002\000\050\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\026\uffbf\030\uffbf\031" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\047\uffbf\051\uffbf" +
    "\052\uffbf\055\uffbf\072\uffbf\073\uffbf\075\uffbf\001\002\000" +
    "\050\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\026\uffc4" +
    "\030\uffc4\031\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\047" +
    "\uffc4\051\uffc4\052\uffc4\055\uffc4\072\uffc4\073\uffc4\075\uffc4" +
    "\001\002\000\050\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\026\uffcf\030\uffcf\031\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\047\uffcf\051\uffcf\052\uffcf\055\uffcf\072\uffcf\073" +
    "\uffcf\075\uffcf\001\002\000\050\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\026\uffc1\030\uffc1\031\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\047\uffc1\051\uffc1\052\uffc1\055\uffc1" +
    "\072\uffc1\073\uffc1\075\uffc1\001\002\000\050\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\026\uffc2\030\uffc2\031\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047\uffc2\051\uffc2\052" +
    "\uffc2\055\uffc2\072\uffc2\073\uffc2\075\uffc2\001\002\000\050" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\026\uffbe\030" +
    "\uffbe\031\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\047\uffbe" +
    "\051\uffbe\052\uffbe\055\uffbe\072\uffbe\073\uffbe\075\uffbe\001" +
    "\002\000\042\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\026\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0\052" +
    "\uffc0\054\066\072\uffc0\073\uffc0\075\uffc0\001\002\000\004" +
    "\046\063\001\002\000\040\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\026\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\047\uffdd\052\uffdd\072\uffdd\073\uffdd\075\uffdd\001\002\000" +
    "\024\007\uffe9\010\054\011\047\012\053\013\055\026\052" +
    "\040\051\041\061\043\056\001\002\000\032\005\036\023" +
    "\031\037\037\042\014\044\032\046\042\057\045\060\026" +
    "\061\044\062\027\063\030\064\035\001\002\000\050\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\026\uffc3\030\uffc3" +
    "\031\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\047\uffc3\051" +
    "\uffc3\052\uffc3\055\uffc3\072\uffc3\073\uffc3\075\uffc3\001\002" +
    "\000\050\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\026" +
    "\uffc5\030\uffc5\031\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\047\uffc5\051\uffc5\052\uffc5\055\uffc5\072\uffc5\073\uffc5\075" +
    "\uffc5\001\002\000\050\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\026\uffc8\030\uffc8\031\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\047\uffc8\051\uffc8\052\uffc8\055\uffc8\072\uffc8" +
    "\073\uffc8\075\uffc8\001\002\000\024\010\054\011\047\012" +
    "\053\013\055\026\052\040\051\041\061\043\056\047\057" +
    "\001\002\000\032\005\uffbc\023\uffbc\037\uffbc\042\uffbc\044" +
    "\uffbc\046\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\001\002\000\032\005\uffb8\023\uffb8\037\uffb8\042" +
    "\uffb8\044\uffb8\046\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\001\002\000\032\005\uffab\023\uffab\037" +
    "\uffab\042\uffab\044\uffab\046\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\001\002\000\032\005\uffb9\023" +
    "\uffb9\037\uffb9\042\uffb9\044\uffb9\046\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000\032\005" +
    "\uffbb\023\uffbb\037\uffbb\042\uffbb\044\uffbb\046\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000" +
    "\032\005\uffbd\023\uffbd\037\uffbd\042\uffbd\044\uffbd\046\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\001" +
    "\002\000\032\005\uffba\023\uffba\037\uffba\042\uffba\044\uffba" +
    "\046\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\001\002\000\032\005\uffa9\023\uffa9\037\uffa9\042\uffa9" +
    "\044\uffa9\046\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\001\002\000\040\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\026\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\047\uffde\052\uffde\072\uffde\073\uffde\075\uffde\001\002" +
    "\000\032\005\036\023\031\037\037\042\014\044\032\046" +
    "\042\057\045\060\026\061\044\062\027\063\030\064\035" +
    "\001\002\000\032\005\uffaa\023\uffaa\037\uffaa\042\uffaa\044" +
    "\uffaa\046\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\001\002\000\040\007\uffe0\010\054\011\047\012" +
    "\053\013\055\026\052\040\051\041\061\042\uffe0\043\056" +
    "\047\uffe0\052\uffe0\072\uffe0\073\uffe0\075\uffe0\001\002\000" +
    "\032\005\036\023\031\037\037\042\014\044\032\046\042" +
    "\057\045\060\026\061\044\062\027\063\030\064\035\001" +
    "\002\000\024\010\054\011\047\012\053\013\055\026\052" +
    "\040\051\041\061\043\056\047\065\001\002\000\040\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\026\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\047\uffdf\052\uffdf\072\uffdf\073" +
    "\uffdf\075\uffdf\001\002\000\010\005\071\046\072\057\067" +
    "\001\002\000\030\010\uffb4\011\uffb4\012\uffb4\013\uffb4\026" +
    "\uffb4\030\uffb4\040\uffb4\041\uffb4\043\uffb4\047\uffb4\055\uffb4" +
    "\001\002\000\030\010\uffda\011\uffda\012\uffda\013\uffda\026" +
    "\uffda\030\uffda\040\uffda\041\uffda\043\uffda\047\uffda\055\uffda" +
    "\001\002\000\032\010\uffb2\011\uffb2\012\uffb2\013\uffb2\020" +
    "\104\026\uffb2\030\uffb2\040\uffb2\041\uffb2\043\uffb2\047\uffb2" +
    "\055\uffb2\001\002\000\010\005\071\046\072\057\067\001" +
    "\002\000\026\010\054\011\047\012\053\013\055\026\052" +
    "\030\075\040\051\041\061\043\056\055\074\001\002\000" +
    "\040\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\026\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\047\uffe2\052\uffe2\072" +
    "\uffe2\073\uffe2\075\uffe2\001\002\000\010\005\071\046\072" +
    "\057\067\001\002\000\010\005\071\046\072\057\067\001" +
    "\002\000\030\010\054\011\047\012\053\013\055\026\052" +
    "\030\uffdc\040\051\041\061\043\056\047\uffdc\055\uffdc\001" +
    "\002\000\024\010\054\011\047\012\053\013\055\026\052" +
    "\040\051\041\061\043\056\055\101\001\002\000\040\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\026\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\047\uffe1\052\uffe1\072\uffe1\073" +
    "\uffe1\075\uffe1\001\002\000\024\010\054\011\047\012\053" +
    "\013\055\026\052\040\051\041\061\043\056\047\103\001" +
    "\002\000\030\010\uffdb\011\uffdb\012\uffdb\013\uffdb\026\uffdb" +
    "\030\uffdb\040\uffdb\041\uffdb\043\uffdb\047\uffdb\055\uffdb\001" +
    "\002\000\004\021\105\001\002\000\030\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\026\uffb3\030\uffb3\040\uffb3\041\uffb3\043" +
    "\uffb3\047\uffb3\055\uffb3\001\002\000\024\014\111\015\125" +
    "\016\112\017\115\022\116\024\121\025\126\027\113\033" +
    "\120\001\002\000\032\005\036\023\031\037\037\042\014" +
    "\044\032\046\042\057\045\060\026\061\044\062\027\063" +
    "\030\064\035\001\002\000\024\007\uffed\010\054\011\047" +
    "\012\053\013\055\026\052\040\051\041\061\043\056\001" +
    "\002\000\014\006\uffa2\007\uffa2\030\uffa2\047\uffa2\053\uffa2" +
    "\001\002\000\014\006\uffa5\007\uffa5\030\uffa5\047\uffa5\053" +
    "\uffa5\001\002\000\004\052\150\001\002\000\014\006\uffa4" +
    "\007\uffa4\030\uffa4\047\uffa4\053\uffa4\001\002\000\014\006" +
    "\uffa7\007\uffa7\030\uffa7\047\uffa7\053\uffa7\001\002\000\004" +
    "\006\146\001\002\000\014\006\uffa3\007\uffa3\030\uffa3\047" +
    "\uffa3\053\uffa3\001\002\000\004\052\131\001\002\000\014" +
    "\006\uff9f\007\uff9f\030\uff9f\047\uff9f\053\uff9f\001\002\000" +
    "\014\006\uffa8\007\uffa8\030\uffa8\047\uffa8\053\uffa8\001\002" +
    "\000\014\006\uffa6\007\uffa6\030\uffa6\047\uffa6\053\uffa6\001" +
    "\002\000\006\006\127\007\uffef\001\002\000\014\006\uffa0" +
    "\007\uffa0\030\uffa0\047\uffa0\053\uffa0\001\002\000\014\006" +
    "\uffa1\007\uffa1\030\uffa1\047\uffa1\053\uffa1\001\002\000\032" +
    "\005\036\023\031\037\037\042\014\044\032\046\042\057" +
    "\045\060\026\061\044\062\027\063\030\064\035\001\002" +
    "\000\024\007\ufff2\010\054\011\047\012\053\013\055\026" +
    "\052\040\051\041\061\043\056\001\002\000\016\014\111" +
    "\015\125\016\112\017\115\024\121\025\126\001\002\000" +
    "\004\053\133\001\002\000\004\006\134\001\002\000\006" +
    "\044\032\054\135\001\002\000\032\005\141\023\031\030" +
    "\uffcc\042\014\044\032\055\uffcc\057\045\060\026\061\044" +
    "\062\027\063\030\064\035\001\002\000\004\007\uffd0\001" +
    "\002\000\004\007\ufff1\001\002\000\006\030\143\055\144" +
    "\001\002\000\012\030\uffc0\031\uffc0\051\uffc0\055\uffc0\001" +
    "\002\000\006\030\uffcd\055\uffcd\001\002\000\026\005\141" +
    "\023\031\042\014\044\032\057\045\060\026\061\044\062" +
    "\027\063\030\064\035\001\002\000\004\007\uffd1\001\002" +
    "\000\006\030\uffce\055\uffce\001\002\000\004\044\032\001" +
    "\002\000\004\007\uffee\001\002\000\004\014\151\001\002" +
    "\000\004\030\152\001\002\000\016\014\111\015\125\016" +
    "\112\017\115\024\121\025\126\001\002\000\004\053\154" +
    "\001\002\000\004\006\155\001\002\000\004\050\157\001" +
    "\002\000\004\007\ufff0\001\002\000\034\005\141\023\031" +
    "\030\uffd5\042\014\044\032\050\160\051\uffd5\057\045\060" +
    "\026\061\044\062\027\063\030\064\035\001\002\000\030" +
    "\005\141\023\031\042\014\044\032\051\171\057\045\060" +
    "\026\061\044\062\027\063\030\064\035\001\002\000\006" +
    "\030\uffd6\051\uffd6\001\002\000\006\030\167\051\166\001" +
    "\002\000\004\031\164\001\002\000\026\005\141\023\031" +
    "\042\014\044\032\057\045\060\026\061\044\062\027\063" +
    "\030\064\035\001\002\000\006\030\uffd4\051\uffd4\001\002" +
    "\000\004\007\uffd8\001\002\000\030\005\141\023\031\042" +
    "\014\044\032\050\160\057\045\060\026\061\044\062\027" +
    "\063\030\064\035\001\002\000\006\030\uffd7\051\uffd7\001" +
    "\002\000\006\030\uffd3\051\uffd3\001\002\000\004\031\173" +
    "\001\002\000\026\005\141\023\031\042\014\044\032\057" +
    "\045\060\026\061\044\062\027\063\030\064\035\001\002" +
    "\000\004\051\175\001\002\000\006\030\uffd2\051\uffd2\001" +
    "\002\000\024\007\uffea\010\054\011\047\012\053\013\055" +
    "\026\052\040\051\041\061\043\056\001\002\000\032\005" +
    "\036\023\031\037\037\042\014\044\032\046\042\057\045" +
    "\060\026\061\044\062\027\063\030\064\035\001\002\000" +
    "\034\010\054\011\047\012\053\013\055\026\052\040\051" +
    "\041\061\043\056\047\uffb5\052\216\072\213\073\212\075" +
    "\215\001\002\000\004\047\202\001\002\000\004\071\203" +
    "\001\002\000\020\005\022\032\023\042\014\045\021\065" +
    "\017\070\024\076\012\001\002\000\020\005\022\032\023" +
    "\042\014\045\021\066\205\067\206\070\024\001\002\000" +
    "\024\005\ufff7\032\ufff7\042\ufff7\045\ufff7\051\ufff7\066\ufff7" +
    "\067\ufff7\070\ufff7\077\ufff7\001\002\000\020\005\022\032" +
    "\023\042\014\045\021\065\017\070\024\076\012\001\002" +
    "\000\024\005\ufff5\032\ufff5\042\ufff5\045\ufff5\051\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\077\ufff5\001\002\000\016\005\022" +
    "\032\023\042\014\045\021\066\211\070\024\001\002\000" +
    "\024\005\ufff6\032\ufff6\042\ufff6\045\ufff6\051\ufff6\066\ufff6" +
    "\067\ufff6\070\ufff6\077\ufff6\001\002\000\032\005\uffb0\023" +
    "\uffb0\037\uffb0\042\uffb0\044\uffb0\046\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001\002\000\032\005" +
    "\uffb1\023\uffb1\037\uffb1\042\uffb1\044\uffb1\046\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000" +
    "\032\005\036\023\031\037\037\042\014\044\032\046\042" +
    "\057\045\060\026\061\044\062\027\063\030\064\035\001" +
    "\002\000\032\005\uffae\023\uffae\037\uffae\042\uffae\044\uffae" +
    "\046\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\001\002\000\032\005\uffaf\023\uffaf\037\uffaf\042\uffaf" +
    "\044\uffaf\046\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\001\002\000\024\010\054\011\047\012\053" +
    "\013\055\026\052\040\051\041\061\043\056\047\uffb6\001" +
    "\002\000\004\007\221\001\002\000\010\002\ufffc\100\ufffc" +
    "\101\ufffc\001\002\000\024\010\054\011\047\012\053\013" +
    "\055\026\052\040\051\041\061\042\223\043\056\001\002" +
    "\000\004\005\224\001\002\000\004\046\225\001\002\000" +
    "\032\005\036\023\031\037\037\042\014\044\032\046\042" +
    "\057\045\060\026\061\044\062\027\063\030\064\035\001" +
    "\002\000\004\047\227\001\002\000\050\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\026\uffb7\030\uffb7\031\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\055\uffb7\072\uffb7\073\uffb7\075\uffb7\001\002\000\024\005" +
    "\ufff3\032\ufff3\042\ufff3\045\ufff3\051\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\077\ufff3\001\002\000\020\005\022\032\023\042" +
    "\014\045\021\051\ufffa\070\024\077\ufffa\001\002\000\004" +
    "\077\233\001\002\000\024\005\ufff8\032\ufff8\042\ufff8\045" +
    "\ufff8\051\ufff8\066\ufff8\067\ufff8\070\ufff8\077\ufff8\001\002" +
    "\000\022\005\022\032\023\042\014\045\021\051\ufff9\065" +
    "\017\070\024\076\012\001\002\000\004\051\236\001\002" +
    "\000\006\007\240\031\237\001\002\000\016\014\111\015" +
    "\125\016\112\017\115\024\121\025\126\001\002\000\010" +
    "\002\ufffe\100\ufffe\101\ufffe\001\002\000\004\007\242\001" +
    "\002\000\010\002\ufffd\100\ufffd\101\ufffd\001\002\000\004" +
    "\002\000\001\002\000\010\002\001\100\001\101\001\001" +
    "\002\000\004\046\246\001\002\000\010\005\247\030\uffe3" +
    "\047\uffe3\001\002\000\004\031\255\001\002\000\006\030" +
    "\252\047\253\001\002\000\006\030\uffe5\047\uffe5\001\002" +
    "\000\010\005\247\030\uffe3\047\uffe3\001\002\000\004\050" +
    "\ufffb\001\002\000\006\030\uffe6\047\uffe6\001\002\000\016" +
    "\014\111\015\125\016\112\017\115\024\121\025\126\001" +
    "\002\000\006\030\uffe4\047\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\010\011\007\012\005\014\004\001\001\000" +
    "\002\001\001\000\006\011\243\012\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\015\003\017\006\012\024\014\001\001\000\014\002\230" +
    "\003\017\006\012\013\231\024\014\001\001\000\002\001" +
    "\001\000\014\007\221\024\033\035\042\044\037\045\032" +
    "\001\001\000\002\001\001\000\010\003\206\006\012\024" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\175\024\033\035\042\044\037\045\032\001\001\000" +
    "\002\001\001\000\014\007\040\024\033\035\042\044\037" +
    "\045\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\057\034\047\001\001\000" +
    "\014\007\045\024\033\035\042\044\037\045\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\057\034\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\061\024\033\035\042\044" +
    "\037\045\032\001\001\000\002\001\001\000\006\010\057" +
    "\034\047\001\001\000\014\007\063\024\033\035\042\044" +
    "\037\045\032\001\001\000\006\010\057\034\047\001\001" +
    "\000\002\001\001\000\006\040\072\041\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\101\041\067\001\001\000\006\010\075\034\047\001" +
    "\001\000\002\001\001\000\006\040\077\041\067\001\001" +
    "\000\006\040\076\041\067\001\001\000\006\010\075\034" +
    "\047\001\001\000\006\010\075\034\047\001\001\000\002" +
    "\001\001\000\006\010\075\034\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\121" +
    "\020\116\021\122\022\113\023\123\001\001\000\014\007" +
    "\107\024\033\035\042\044\037\045\032\001\001\000\006" +
    "\010\057\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\127\024\033\035\042\044\037\045\032\001\001\000\006" +
    "\010\057\034\047\001\001\000\014\017\121\020\116\021" +
    "\122\022\113\023\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\136\045\135\001\001\000\014\024" +
    "\033\035\042\042\137\044\141\045\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\033\035\042\044\144" +
    "\045\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\121\020\116\021\122\022" +
    "\113\023\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\155\001\001\000\002\001\001\000\016\024" +
    "\033\025\160\026\161\035\042\044\162\045\032\001\001" +
    "\000\012\024\033\035\042\044\171\045\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\033\035\042\044\164\045\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\033\025\167\035\042" +
    "\044\162\045\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\033\035\042\044\173" +
    "\045\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\057\034\047\001\001\000\016\007\177\024\033" +
    "\030\200\035\042\044\037\045\032\001\001\000\010\010" +
    "\057\031\213\034\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\203\003\017\006\012\024\014\001" +
    "\001\000\010\003\206\006\012\024\014\001\001\000\002" +
    "\001\001\000\012\002\207\003\017\006\012\024\014\001" +
    "\001\000\002\001\001\000\010\003\206\006\012\024\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\216\024\033\035\042\044\037\045\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\057\034\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\057\034\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\177\024\033\030\225\035\042" +
    "\044\037\045\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\206\006\012\024\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\230\003\017\006\012\013\234\024\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\121\020\116\021" +
    "\122\022\113\023\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\247\016\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\121\020\116\021\122\022\113\023\255\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= methods EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_declaration ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statements ::= LOOP method_body POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statements ::= IF LPAREN comparison RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= IF LPAREN comparison RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // full_exp ::= IDENTIFIER COL type EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // full_exp ::= IDENTIFIER COL SEQ LPAREN_TRI type RPAREN_TRI EQUAL array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // full_exp ::= IDENTIFIER COL DICT LPAREN_TRI INT COMMA type RPAREN_TRI EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // full_exp ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // full_exp ::= IDENTIFIER COL STRING EQUAL string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // full_exp ::= IDENTIFIER EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= PRINT simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= RETURN simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_exp ::= IDENTIFIER LPAREN_SQ simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_exp ::= IDENTIFIER LPAREN_SQ simple_integer_exp COMMA simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_exp ::= NOT LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_integer_exp ::= simple_integer_exp operator_binary simple_integer_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_integer_exp ::= LPAREN simple_integer_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_integer_exp ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list ::= list COMMA value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparables_list ::= comparables_list COMMA simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparables_list ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparables_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_call ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comparison ::= simple_exp comparison_operators simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparison ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
