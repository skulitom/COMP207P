
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\014\004\000\002\002\004\000\002\014" +
    "\003\000\002\011\007\000\002\011\014\000\002\011\007" +
    "\000\002\011\011\000\002\011\012\000\002\012\007\000" +
    "\002\013\003\000\002\013\002\000\002\002\005\000\002" +
    "\002\011\000\002\002\013\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\006\007\000\002\006\012" +
    "\000\002\006\014\000\002\006\005\000\002\006\007\000" +
    "\002\006\005\000\002\006\011\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\003\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\002" +
    "\000\002\007\006\000\002\007\010\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\007\003\000\002" +
    "\024\003\000\002\024\003\000\002\042\005\000\002\042" +
    "\005\000\002\042\003\000\002\033\010\000\002\027\005" +
    "\000\002\026\005\000\002\026\003\000\002\026\002\000" +
    "\002\025\005\000\002\025\004\000\002\025\007\000\002" +
    "\045\005\000\002\045\003\000\002\047\003\000\002\044" +
    "\005\000\002\044\003\000\002\044\002\000\002\040\005" +
    "\000\002\040\003\000\002\040\002\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\004\000\002\037" +
    "\003\000\002\037\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\030\005\000\002\034\005\000\002" +
    "\034\007\000\002\034\006\000\002\034\005\000\002\034" +
    "\003\000\002\034\002\000\002\036\010\000\002\036\006" +
    "\000\002\036\003\000\002\036\003\000\002\043\003\000" +
    "\002\043\005\000\002\043\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\003\000\002\032\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\023\003\000" +
    "\002\023\003\000\002\017\003\000\002\017\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\100\007\101\004\001\002\000\004\005" +
    "\304\001\002\000\010\002\302\100\007\101\004\001\002" +
    "\000\004\050\266\001\002\000\004\050\011\001\002\000" +
    "\010\002\uffff\100\uffff\101\uffff\001\002\000\020\005\022" +
    "\032\ufff7\042\014\045\021\065\016\070\023\076\012\001" +
    "\002\000\016\005\022\042\014\045\021\065\016\070\023" +
    "\076\012\001\002\000\004\007\263\001\002\000\026\005" +
    "\035\011\027\023\033\046\040\057\043\060\030\061\042" +
    "\062\032\063\031\064\034\001\002\000\016\005\022\032" +
    "\ufff8\042\014\045\021\051\250\070\023\001\002\000\004" +
    "\046\201\001\002\000\004\032\171\001\002\000\024\005" +
    "\ufff2\032\ufff2\042\ufff2\045\ufff2\051\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\077\ufff2\001\002\000\024\005\167\011\027\023" +
    "\033\057\043\060\030\061\042\062\032\063\031\064\034" +
    "\001\002\000\006\006\026\031\025\001\002\000\006\007" +
    "\uffe6\057\024\001\002\000\004\007\uffe9\001\002\000\024" +
    "\014\102\015\116\016\103\017\106\022\110\024\112\025" +
    "\117\027\104\033\111\001\002\000\026\005\035\011\027" +
    "\023\033\046\040\057\043\060\030\061\042\062\032\063" +
    "\031\064\034\001\002\000\004\057\101\001\002\000\050" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\026\uffc4\030" +
    "\uffc4\031\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\047\uffc4" +
    "\051\uffc4\052\uffc4\055\uffc4\072\uffc4\073\uffc4\075\uffc4\001" +
    "\002\000\050\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\026\uffbe\030\uffbe\031\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\047\uffbe\051\uffbe\052\uffbe\055\uffbe\072\uffbe\073\uffbe" +
    "\075\uffbe\001\002\000\050\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\026\uffc3\030\uffc3\031\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\047\uffc3\051\uffc3\052\uffc3\055\uffc3\072" +
    "\uffc3\073\uffc3\075\uffc3\001\002\000\050\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\026\uffc1\030\uffc1\031\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\055\uffc1\072\uffc1\073\uffc1\075\uffc1\001\002\000\050\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\026\uffbd\030\uffbd" +
    "\031\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\047\uffbd\051" +
    "\uffbd\052\uffbd\055\uffbd\072\uffbd\073\uffbd\075\uffbd\001\002" +
    "\000\032\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\026" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\047\uffdc\054\061" +
    "\001\002\000\030\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\026\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\047\uffdd" +
    "\001\002\000\024\007\uffeb\010\052\011\046\012\051\013" +
    "\053\026\050\040\047\041\057\043\054\001\002\000\026" +
    "\005\035\011\027\023\033\046\040\057\043\060\030\061" +
    "\042\062\032\063\031\064\034\001\002\000\050\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0\051\uffc0" +
    "\052\uffc0\055\uffc0\072\uffc0\073\uffc0\075\uffc0\001\002\000" +
    "\050\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\026\uffc2" +
    "\030\uffc2\031\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047" +
    "\uffc2\051\uffc2\052\uffc2\055\uffc2\072\uffc2\073\uffc2\075\uffc2" +
    "\001\002\000\050\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\026\uffc5\030\uffc5\031\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\047\uffc5\051\uffc5\052\uffc5\055\uffc5\072\uffc5\073" +
    "\uffc5\075\uffc5\001\002\000\024\010\052\011\046\012\051" +
    "\013\053\026\050\040\047\041\057\043\054\047\055\001" +
    "\002\000\026\005\uffb7\011\uffb7\023\uffb7\046\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000" +
    "\026\005\uffbb\011\uffbb\023\uffbb\046\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\026\005" +
    "\uffa1\011\uffa1\023\uffa1\046\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\064\uffa1\001\002\000\026\005\uffb8\011" +
    "\uffb8\023\uffb8\046\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\001\002\000\026\005\uffba\011\uffba\023" +
    "\uffba\046\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\001\002\000\026\005\uffbc\011\uffbc\023\uffbc\046" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\001\002\000\026\005\uffb9\011\uffb9\023\uffb9\046\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002" +
    "\000\026\005\uff9f\011\uff9f\023\uff9f\046\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\001\002\000\030" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\026\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\047\uffde\001\002\000\026" +
    "\005\035\011\027\023\033\046\040\057\043\060\030\061" +
    "\042\062\032\063\031\064\034\001\002\000\026\005\uffa0" +
    "\011\uffa0\023\uffa0\046\uffa0\057\uffa0\060\uffa0\061\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\001\002\000\030\007\uffdf\010\052" +
    "\011\046\012\051\013\053\026\050\040\047\041\057\042" +
    "\uffdf\043\054\047\uffdf\001\002\000\010\005\064\046\065" +
    "\057\062\001\002\000\030\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\026\uffab\030\uffab\040\uffab\041\uffab\043\uffab\047\uffab" +
    "\055\uffab\001\002\000\030\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\026\uffd7\030\uffd7\040\uffd7\041\uffd7\043\uffd7\047\uffd7" +
    "\055\uffd7\001\002\000\032\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\020\077\026\uffa9\030\uffa9\040\uffa9\041\uffa9\043\uffa9" +
    "\047\uffa9\055\uffa9\001\002\000\010\005\064\046\065\057" +
    "\062\001\002\000\026\010\052\011\046\012\051\013\053" +
    "\026\050\030\070\040\047\041\057\043\054\055\067\001" +
    "\002\000\030\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\026\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\047\uffe1\001" +
    "\002\000\010\005\064\046\065\057\062\001\002\000\010" +
    "\005\064\046\065\057\062\001\002\000\030\010\052\011" +
    "\046\012\051\013\053\026\050\030\uffd9\040\047\041\057" +
    "\043\054\047\uffd9\055\uffd9\001\002\000\024\010\052\011" +
    "\046\012\051\013\053\026\050\040\047\041\057\043\054" +
    "\055\074\001\002\000\030\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\026\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\047\uffe0\001\002\000\024\010\052\011\046\012\051\013" +
    "\053\026\050\040\047\041\057\043\054\047\076\001\002" +
    "\000\030\010\uffd8\011\uffd8\012\uffd8\013\uffd8\026\uffd8\030" +
    "\uffd8\040\uffd8\041\uffd8\043\uffd8\047\uffd8\055\uffd8\001\002" +
    "\000\004\021\100\001\002\000\030\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\026\uffaa\030\uffaa\040\uffaa\041\uffaa\043\uffaa" +
    "\047\uffaa\055\uffaa\001\002\000\050\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\026\uffbf\030\uffbf\031\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\047\uffbf\051\uffbf\052\uffbf\055" +
    "\uffbf\072\uffbf\073\uffbf\075\uffbf\001\002\000\014\006\uff98" +
    "\007\uff98\030\uff98\047\uff98\053\uff98\001\002\000\014\006" +
    "\uff9b\007\uff9b\030\uff9b\047\uff9b\053\uff9b\001\002\000\004" +
    "\052\141\001\002\000\014\006\uff9a\007\uff9a\030\uff9a\047" +
    "\uff9a\053\uff9a\001\002\000\014\006\uff9d\007\uff9d\030\uff9d" +
    "\047\uff9d\053\uff9d\001\002\000\014\006\uff99\007\uff99\030" +
    "\uff99\047\uff99\053\uff99\001\002\000\004\006\137\001\002" +
    "\000\004\052\122\001\002\000\014\006\uff95\007\uff95\030" +
    "\uff95\047\uff95\053\uff95\001\002\000\014\006\uff9e\007\uff9e" +
    "\030\uff9e\047\uff9e\053\uff9e\001\002\000\014\006\uff9c\007" +
    "\uff9c\030\uff9c\047\uff9c\053\uff9c\001\002\000\006\006\120" +
    "\007\uffed\001\002\000\014\006\uff96\007\uff96\030\uff96\047" +
    "\uff96\053\uff96\001\002\000\014\006\uff97\007\uff97\030\uff97" +
    "\047\uff97\053\uff97\001\002\000\026\005\035\011\027\023" +
    "\033\046\040\057\043\060\030\061\042\062\032\063\031" +
    "\064\034\001\002\000\024\007\ufff0\010\052\011\046\012" +
    "\051\013\053\026\050\040\047\041\057\043\054\001\002" +
    "\000\016\014\102\015\116\016\103\017\106\024\112\025" +
    "\117\001\002\000\004\053\124\001\002\000\004\006\125" +
    "\001\002\000\006\044\130\054\126\001\002\000\026\011" +
    "\027\023\033\030\uffc9\055\uffc9\057\043\060\030\061\042" +
    "\062\032\063\031\064\034\001\002\000\004\007\uffcd\001" +
    "\002\000\004\007\uffcc\001\002\000\004\007\uffef\001\002" +
    "\000\006\030\134\055\135\001\002\000\006\030\uffca\055" +
    "\uffca\001\002\000\022\011\027\023\033\057\043\060\030" +
    "\061\042\062\032\063\031\064\034\001\002\000\004\007" +
    "\uffce\001\002\000\006\030\uffcb\055\uffcb\001\002\000\004" +
    "\044\130\001\002\000\004\007\uffec\001\002\000\004\014" +
    "\142\001\002\000\004\030\143\001\002\000\016\014\102" +
    "\015\116\016\103\017\106\024\112\025\117\001\002\000" +
    "\004\053\145\001\002\000\004\006\146\001\002\000\004" +
    "\050\150\001\002\000\004\007\uffee\001\002\000\030\011" +
    "\027\023\033\030\uffd2\050\151\051\uffd2\057\043\060\030" +
    "\061\042\062\032\063\031\064\034\001\002\000\024\011" +
    "\027\023\033\051\162\057\043\060\030\061\042\062\032" +
    "\063\031\064\034\001\002\000\006\030\uffd3\051\uffd3\001" +
    "\002\000\006\030\160\051\157\001\002\000\004\031\155" +
    "\001\002\000\022\011\027\023\033\057\043\060\030\061" +
    "\042\062\032\063\031\064\034\001\002\000\006\030\uffd1" +
    "\051\uffd1\001\002\000\004\007\uffd5\001\002\000\024\011" +
    "\027\023\033\050\151\057\043\060\030\061\042\062\032" +
    "\063\031\064\034\001\002\000\006\030\uffd4\051\uffd4\001" +
    "\002\000\006\030\uffd0\051\uffd0\001\002\000\004\031\164" +
    "\001\002\000\022\011\027\023\033\057\043\060\030\061" +
    "\042\062\032\063\031\064\034\001\002\000\004\051\166" +
    "\001\002\000\006\030\uffcf\051\uffcf\001\002\000\004\007" +
    "\uffe7\001\002\000\004\007\uffe8\001\002\000\006\005\173" +
    "\007\172\001\002\000\004\051\177\001\002\000\004\007" +
    "\174\001\002\000\004\051\175\001\002\000\004\007\176" +
    "\001\002\000\010\002\ufffa\100\ufffa\101\ufffa\001\002\000" +
    "\004\007\200\001\002\000\010\002\ufffb\100\ufffb\101\ufffb" +
    "\001\002\000\040\005\204\011\027\023\033\037\206\040" +
    "\uffb0\041\uffb0\043\uffb0\046\207\047\uffb0\057\043\060\030" +
    "\061\042\062\032\063\031\064\034\001\002\000\012\040" +
    "\047\041\057\043\054\047\233\001\002\000\020\040\047" +
    "\041\057\043\054\052\231\072\224\073\226\075\227\001" +
    "\002\000\026\030\uffac\040\uffac\041\uffac\043\uffac\047\uffac" +
    "\052\uffac\054\216\072\uffac\073\uffac\075\uffac\001\002\000" +
    "\024\030\uffad\040\uffad\041\uffad\043\uffad\047\uffad\052\uffad" +
    "\072\uffad\073\uffad\075\uffad\001\002\000\004\046\213\001" +
    "\002\000\024\005\204\011\027\023\033\057\043\060\030" +
    "\061\042\062\032\063\031\064\034\001\002\000\012\040" +
    "\uffb1\041\uffb1\043\uffb1\047\uffb1\001\002\000\004\047\212" +
    "\001\002\000\012\040\uffb2\041\uffb2\043\uffb2\047\uffb2\001" +
    "\002\000\024\005\204\011\027\023\033\057\043\060\030" +
    "\061\042\062\032\063\031\064\034\001\002\000\004\047" +
    "\215\001\002\000\012\040\uffb3\041\uffb3\043\uffb3\047\uffb3" +
    "\001\002\000\010\005\064\046\065\057\062\001\002\000" +
    "\026\010\052\011\046\012\051\013\053\026\050\030\221" +
    "\040\047\041\057\043\054\055\220\001\002\000\024\030" +
    "\uffae\040\uffae\041\uffae\043\uffae\047\uffae\052\uffae\072\uffae" +
    "\073\uffae\075\uffae\001\002\000\010\005\064\046\065\057" +
    "\062\001\002\000\024\010\052\011\046\012\051\013\053" +
    "\026\050\040\047\041\057\043\054\055\223\001\002\000" +
    "\024\030\uffaf\040\uffaf\041\uffaf\043\uffaf\047\uffaf\052\uffaf" +
    "\072\uffaf\073\uffaf\075\uffaf\001\002\000\024\005\uffa8\011" +
    "\uffa8\023\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\001\002\000\024\005\uffa4\011\uffa4\023\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002" +
    "\000\024\005\uffa7\011\uffa7\023\uffa7\057\uffa7\060\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000\024\005\uffa5" +
    "\011\uffa5\023\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\064\uffa5\001\002\000\024\005\204\011\027\023\033" +
    "\057\043\060\030\061\042\062\032\063\031\064\034\001" +
    "\002\000\024\005\uffa6\011\uffa6\023\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002\000\012\040" +
    "\uffb6\041\uffb6\043\uffb6\047\uffb6\001\002\000\004\071\241" +
    "\001\002\000\026\005\204\011\027\023\033\046\236\057" +
    "\043\060\030\061\042\062\032\063\031\064\034\001\002" +
    "\000\012\040\uffb5\041\uffb5\043\uffb5\047\uffb5\001\002\000" +
    "\024\005\204\011\027\023\033\057\043\060\030\061\042" +
    "\062\032\063\031\064\034\001\002\000\004\047\240\001" +
    "\002\000\012\040\uffb4\041\uffb4\043\uffb4\047\uffb4\001\002" +
    "\000\016\005\022\042\014\045\021\065\016\070\023\076" +
    "\012\001\002\000\016\005\022\042\014\045\021\066\243" +
    "\067\244\070\023\001\002\000\024\005\ufff5\032\ufff5\042" +
    "\ufff5\045\ufff5\051\ufff5\066\ufff5\067\ufff5\070\ufff5\077\ufff5" +
    "\001\002\000\016\005\022\042\014\045\021\065\016\070" +
    "\023\076\012\001\002\000\024\005\ufff3\032\ufff3\042\ufff3" +
    "\045\ufff3\051\ufff3\066\ufff3\067\ufff3\070\ufff3\077\ufff3\001" +
    "\002\000\014\005\022\042\014\045\021\066\247\070\023" +
    "\001\002\000\024\005\ufff4\032\ufff4\042\ufff4\045\ufff4\051" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\077\ufff4\001\002\000\004" +
    "\007\251\001\002\000\010\002\ufffc\100\ufffc\101\ufffc\001" +
    "\002\000\024\010\052\011\046\012\051\013\053\026\050" +
    "\040\047\041\057\042\253\043\054\001\002\000\004\005" +
    "\254\001\002\000\004\046\255\001\002\000\030\005\204" +
    "\011\027\023\033\030\uffc6\047\uffc6\057\043\060\030\061" +
    "\042\062\032\063\031\064\034\001\002\000\006\030\uffc7" +
    "\047\uffc7\001\002\000\006\030\260\047\261\001\002\000" +
    "\024\005\204\011\027\023\033\057\043\060\030\061\042" +
    "\062\032\063\031\064\034\001\002\000\004\007\uffea\001" +
    "\002\000\006\030\uffc8\047\uffc8\001\002\000\024\005\ufff1" +
    "\032\ufff1\042\ufff1\045\ufff1\051\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\077\ufff1\001\002\000\014\005\022\042\014\045\021" +
    "\070\023\077\265\001\002\000\024\005\ufff6\032\ufff6\042" +
    "\ufff6\045\ufff6\051\ufff6\066\ufff6\067\ufff6\070\ufff6\077\ufff6" +
    "\001\002\000\022\005\022\032\ufff7\042\014\045\021\051" +
    "\ufff7\065\016\070\023\076\012\001\002\000\016\005\022" +
    "\032\ufff8\042\014\045\021\051\ufff8\070\023\001\002\000" +
    "\006\032\272\051\271\001\002\000\004\007\301\001\002" +
    "\000\004\005\273\001\002\000\004\007\274\001\002\000" +
    "\004\051\275\001\002\000\004\031\276\001\002\000\016" +
    "\014\102\015\116\016\103\017\106\024\112\025\117\001" +
    "\002\000\004\007\300\001\002\000\010\002\ufffd\100\ufffd" +
    "\101\ufffd\001\002\000\010\002\ufffe\100\ufffe\101\ufffe\001" +
    "\002\000\004\002\000\001\002\000\010\002\001\100\001" +
    "\101\001\001\002\000\004\046\305\001\002\000\010\005" +
    "\306\030\uffe2\047\uffe2\001\002\000\004\031\314\001\002" +
    "\000\006\030\311\047\312\001\002\000\006\030\uffe4\047" +
    "\uffe4\001\002\000\010\005\306\030\uffe2\047\uffe2\001\002" +
    "\000\004\050\ufff9\001\002\000\006\030\uffe5\047\uffe5\001" +
    "\002\000\016\014\102\015\116\016\103\017\106\024\112" +
    "\025\117\001\002\000\006\030\uffe3\047\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\010\011\007\012\005\014\004\001\001\000" +
    "\002\001\001\000\006\011\302\012\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\014\003\017\006\012\013\016\001\001\000\010\002\263" +
    "\003\017\006\012\001\001\000\002\001\001\000\010\007" +
    "\251\037\040\046\035\001\001\000\006\003\244\006\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\040\046\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\112\020" +
    "\106\021\113\022\104\023\114\001\001\000\010\007\036" +
    "\037\040\046\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\055\035\044\001\001\000\010\007\043\037\040" +
    "\046\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\055\035\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\057\037" +
    "\040\046\035\001\001\000\002\001\001\000\006\010\055" +
    "\035\044\001\001\000\006\042\065\043\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\074\043\062\001\001\000\006\010\070\035\044\001" +
    "\001\000\002\001\001\000\006\042\072\043\062\001\001" +
    "\000\006\042\071\043\062\001\001\000\006\010\070\035" +
    "\044\001\001\000\006\010\070\035\044\001\001\000\002" +
    "\001\001\000\006\010\070\035\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\120\037\040\046\035\001" +
    "\001\000\006\010\055\035\044\001\001\000\014\017\112" +
    "\020\106\021\113\022\104\023\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\130\047\126\001\001" +
    "\000\010\037\040\044\131\046\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\040\046\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\112\020\106\021\113\022\104\023\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\146\001" +
    "\001\000\002\001\001\000\012\025\151\026\152\037\040" +
    "\046\153\001\001\000\006\037\040\046\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\040\046\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\160\037\040\046\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\040\046\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\207\034\201\036\202\037\040\046\204" +
    "\001\001\000\004\035\233\001\001\000\006\031\227\035" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\210\036\202\037\040\046\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\213\036\202\037\040\046\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\216\043\062" +
    "\001\001\000\006\010\070\035\044\001\001\000\002\001" +
    "\001\000\006\042\221\043\062\001\001\000\006\010\070" +
    "\035\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\036\231\037\040\046\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\234\036\202" +
    "\037\040\046\204\001\001\000\002\001\001\000\012\030" +
    "\236\036\202\037\040\046\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\241\003\017\006\012\001" +
    "\001\000\006\003\244\006\012\001\001\000\002\001\001" +
    "\000\010\002\245\003\017\006\012\001\001\000\002\001" +
    "\001\000\006\003\244\006\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\055\035" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\036\255\037\040\040\256\046\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\261\037\040\046\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\244\006\012\001\001\000\002\001\001" +
    "\000\012\002\266\003\017\006\012\013\267\001\001\000" +
    "\006\003\244\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\112\020\106\021\113" +
    "\022\104\023\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\306\016\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\112\020\106\021\113\022\104\023\314\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= methods EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_declaration ::= method_header LPAREN_CURLY method_body RETURN IDENTIFIER SEMICOL RPAREN_CURLY COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_declaration ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_declaration ::= MAIN_FUNC LPAREN_CURLY method_body RETURN SEMICOL RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_declaration ::= MAIN_FUNC LPAREN_CURLY method_body RETURN IDENTIFIER SEMICOL RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= IF LPAREN comparison_list RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statements ::= IF LPAREN comparison_list RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // full_exp ::= IDENTIFIER COL type EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // full_exp ::= IDENTIFIER COL SEQ LPAREN_TRI type RPAREN_TRI EQUAL array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // full_exp ::= IDENTIFIER COL DICT LPAREN_TRI INT COMMA type RPAREN_TRI EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // full_exp ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= IDENTIFIER COL STRING EQUAL string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= IDENTIFIER EQUAL simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN comparables_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= PRINT value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= PRINT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= IDENTIFIER COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_exp ::= IDENTIFIER LPAREN_SQ simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_exp ::= IDENTIFIER LPAREN_SQ simple_integer_exp COMMA simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_exp ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // result ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // result ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_integer_exp ::= simple_integer_exp operator_binary simple_integer_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_integer_exp ::= LPAREN simple_integer_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_integer_exp ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_integer_exp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list ::= list COMMA value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparables_list ::= comparables_list COMMA comparable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparables_list ::= comparable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparables_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= MINUS INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comparison ::= comparable comparison_operators comparable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparison_list ::= comparison_list boolean_twoway_operators comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparison_list ::= comparison_list boolean_twoway_operators LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparison_list ::= NOT LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparison_list ::= LPAREN comparison RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparison_list ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparison_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparable ::= IDENTIFIER LPAREN_SQ simple_integer_exp COMMA simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparable ::= IDENTIFIER LPAREN_SQ simple_integer_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparable ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparable ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparable",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comparison_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
