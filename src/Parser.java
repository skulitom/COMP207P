
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\014\004\000\002\002\004\000\002\014" +
    "\003\000\002\014\003\000\002\011\007\000\002\011\011" +
    "\000\002\011\007\000\002\012\007\000\002\013\003\000" +
    "\002\013\002\000\002\002\004\000\002\002\003\000\002" +
    "\054\005\000\002\054\013\000\002\054\011\000\002\003" +
    "\004\000\002\003\003\000\002\006\007\000\002\006\007" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\015\005" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\002\000\002\055\010\000\002\055\006\000\002" +
    "\055\006\000\002\056\003\000\002\056\003\000\002\007" +
    "\005\000\002\007\006\000\002\007\005\000\002\007\004" +
    "\000\002\007\003\000\002\035\007\000\002\031\005\000" +
    "\002\030\005\000\002\030\003\000\002\030\002\000\002" +
    "\027\005\000\002\027\004\000\002\027\007\000\002\050" +
    "\005\000\002\050\003\000\002\052\003\000\002\047\005" +
    "\000\002\047\003\000\002\047\002\000\002\020\003\000" +
    "\002\020\003\000\002\040\005\000\002\040\003\000\002" +
    "\040\002\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\037\003\000\002\037\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\026\011\000\002\032\005" +
    "\000\002\032\003\000\002\046\005\000\002\046\003\000" +
    "\002\053\004\000\002\053\004\000\002\043\003\000\002" +
    "\043\005\000\002\043\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\021" +
    "\003\000\002\021\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\022\003\000" +
    "\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\032\005\015\032\014\034\010\042\006\045" +
    "\024\067\017\072\023\100\012\102\004\103\020\104\022" +
    "\105\026\001\002\000\042\005\076\007\uffc6\011\107\023" +
    "\114\030\uffc6\037\075\042\006\044\103\046\101\050\uffc6" +
    "\061\111\062\074\063\104\064\115\065\100\066\106\001" +
    "\002\000\044\002\ufff6\005\ufff6\032\ufff6\034\ufff6\042\ufff6" +
    "\045\ufff6\053\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\001\002" +
    "\000\034\005\076\011\107\023\114\037\075\042\006\044" +
    "\103\046\101\061\111\062\074\063\104\064\115\065\100" +
    "\066\106\001\002\000\010\002\uffff\103\uffff\104\uffff\001" +
    "\002\000\026\005\071\014\044\015\057\016\045\017\047" +
    "\022\050\024\052\025\060\027\035\033\042\001\002\000" +
    "\004\007\uffe4\001\002\000\030\005\015\032\014\034\010" +
    "\042\006\045\024\067\017\072\023\100\012\101\ufff8\102" +
    "\004\105\026\001\002\000\004\007\265\001\002\000\042" +
    "\005\076\007\uffc6\011\107\023\114\030\uffc6\037\075\042" +
    "\006\044\103\046\101\050\uffc6\061\111\062\074\063\104" +
    "\064\115\065\100\066\106\001\002\000\046\005\076\006" +
    "\227\007\uffc6\011\107\023\114\030\uffc6\031\230\037\075" +
    "\042\006\044\103\046\101\050\uffc6\061\111\062\074\063" +
    "\104\064\115\065\100\066\106\001\002\000\004\007\uffeb" +
    "\001\002\000\004\046\204\001\002\000\004\052\200\001" +
    "\002\000\004\052\170\001\002\000\004\005\164\001\002" +
    "\000\006\007\uffe3\061\163\001\002\000\042\005\076\007" +
    "\uffc6\011\107\023\114\030\uffc6\037\075\042\006\044\103" +
    "\046\101\050\uffc6\061\111\062\074\063\104\064\115\065" +
    "\100\066\106\001\002\000\034\002\ufffe\005\015\032\014" +
    "\034\010\042\006\045\024\067\017\072\023\100\012\102" +
    "\004\103\ufffe\104\ufffe\105\026\001\002\000\004\005\033" +
    "\001\002\000\010\002\031\103\020\104\022\001\002\000" +
    "\044\002\ufff1\005\ufff1\032\ufff1\034\ufff1\042\ufff1\045\ufff1" +
    "\053\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\100\ufff1\101" +
    "\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\001\002\000\004" +
    "\002\000\001\002\000\010\002\001\103\001\104\001\001" +
    "\002\000\004\052\034\001\002\000\014\005\036\027\035" +
    "\030\uffde\033\042\053\uffde\001\002\000\004\054\147\001" +
    "\002\000\006\031\145\056\072\001\002\000\004\031\065" +
    "\001\002\000\006\030\063\053\062\001\002\000\010\030" +
    "\uffe1\047\uffe1\053\uffe1\001\002\000\004\054\043\001\002" +
    "\000\022\005\056\014\044\015\057\016\045\017\047\022" +
    "\050\024\052\025\060\001\002\000\042\005\uff93\006\uff93" +
    "\007\uff93\014\uff93\015\uff93\016\uff93\017\uff93\022\uff93\024" +
    "\uff93\025\uff93\027\uff93\030\uff93\033\uff93\047\uff93\053\uff93" +
    "\055\uff93\001\002\000\042\005\uff96\006\uff96\007\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\022\uff96\024\uff96\025\uff96" +
    "\027\uff96\030\uff96\033\uff96\047\uff96\053\uff96\055\uff96\001" +
    "\002\000\042\005\uff95\006\uff95\007\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\022\uff95\024\uff95\025\uff95\027\uff95\030" +
    "\uff95\033\uff95\047\uff95\053\uff95\055\uff95\001\002\000\042" +
    "\005\uff9a\006\uff9a\007\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\022\uff9a\024\uff9a\025\uff9a\027\uff9a\030\uff9a\033\uff9a" +
    "\047\uff9a\053\uff9a\055\uff9a\001\002\000\042\005\uff99\006" +
    "\uff99\007\uff99\014\uff99\015\uff99\016\uff99\017\uff99\022\uff99" +
    "\024\uff99\025\uff99\027\uff99\030\uff99\033\uff99\047\uff99\053" +
    "\uff99\055\uff99\001\002\000\042\005\uff94\006\uff94\007\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\022\uff94\024\uff94\025" +
    "\uff94\027\uff94\030\uff94\033\uff94\047\uff94\053\uff94\055\uff94" +
    "\001\002\000\042\005\uff90\006\uff90\007\uff90\014\uff90\015" +
    "\uff90\016\uff90\017\uff90\022\uff90\024\uff90\025\uff90\027\uff90" +
    "\030\uff90\033\uff90\047\uff90\053\uff90\055\uff90\001\002\000" +
    "\042\005\uff9b\006\uff9b\007\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\022\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\033" +
    "\uff9b\047\uff9b\053\uff9b\055\uff9b\001\002\000\042\005\uff97" +
    "\006\uff97\007\uff97\014\uff97\015\uff97\016\uff97\017\uff97\022" +
    "\uff97\024\uff97\025\uff97\027\uff97\030\uff97\033\uff97\047\uff97" +
    "\053\uff97\055\uff97\001\002\000\004\055\061\001\002\000" +
    "\004\055\uff98\001\002\000\042\005\uff91\006\uff91\007\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\022\uff91\024\uff91\025" +
    "\uff91\027\uff91\030\uff91\033\uff91\047\uff91\053\uff91\055\uff91" +
    "\001\002\000\042\005\uff92\006\uff92\007\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\022\uff92\024\uff92\025\uff92\027\uff92" +
    "\030\uff92\033\uff92\047\uff92\053\uff92\055\uff92\001\002\000" +
    "\042\005\uffdc\006\uffdc\007\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\022\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\033\uffdc\047\uffdc\053\uffdc\001\002\000\004\007\uffd3" +
    "\001\002\000\016\005\036\027\035\030\uffde\033\042\047" +
    "\uffde\053\uffde\001\002\000\010\030\uffe2\047\uffe2\053\uffe2" +
    "\001\002\000\026\005\071\014\044\015\057\016\045\017" +
    "\047\022\050\024\052\025\060\027\035\033\042\001\002" +
    "\000\040\005\uffd9\006\uffd9\007\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\022\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9" +
    "\033\uffd9\047\uffd9\053\uffd9\001\002\000\040\005\uffda\006" +
    "\uffda\007\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda" +
    "\024\uffda\025\uffda\027\uffda\030\uffda\033\uffda\047\uffda\053" +
    "\uffda\001\002\000\010\030\uffdf\047\uffdf\053\uffdf\001\002" +
    "\000\042\005\uff98\006\uff98\007\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\022\uff98\024\uff98\025\uff98\027\uff98\030\uff98" +
    "\033\uff98\047\uff98\053\uff98\056\072\001\002\000\034\005" +
    "\076\011\107\023\114\037\075\042\006\044\103\046\101" +
    "\061\111\062\074\063\104\064\115\065\100\066\106\001" +
    "\002\000\054\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\026\uffb9\030\uffb9\031\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\057\uffb9" +
    "\074\uffb9\075\uffb9\077\uffb9\001\002\000\054\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\026\uffbf\030\uffbf\031\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\053\uffbf\054\uffbf\057\uffbf\074\uffbf\075\uffbf\077\uffbf" +
    "\001\002\000\004\046\142\001\002\000\056\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\020\140\026\uffa6\030\uffa6" +
    "\031\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\053\uffa6\054\uffa6\057\uffa6\074\uffa6\075\uffa6" +
    "\077\uffa6\001\002\000\054\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\026\uffba\030\uffba\031\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\047\uffba\050\uffba\051\uffba\053\uffba\054" +
    "\uffba\057\uffba\074\uffba\075\uffba\077\uffba\001\002\000\054" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\026\uffb7\030" +
    "\uffb7\031\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\053\uffb7\054\uffb7\057\uffb7\074\uffb7\075" +
    "\uffb7\077\uffb7\001\002\000\034\005\076\011\107\023\114" +
    "\037\075\042\006\044\103\046\101\061\111\062\074\063" +
    "\104\064\115\065\100\066\106\001\002\000\054\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\053\uffc0\054\uffc0\057\uffc0\074\uffc0\075\uffc0\077" +
    "\uffc0\001\002\000\054\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\026\uffc9\030\uffc9\031\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9" +
    "\057\uffc9\074\uffc9\075\uffc9\077\uffc9\001\002\000\054\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\026\uffbd\030\uffbd" +
    "\031\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\057\uffbd\074\uffbd\075\uffbd" +
    "\077\uffbd\001\002\000\050\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\026\uffd4\030\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\057\uffd4\074" +
    "\uffd4\075\uffd4\077\uffd4\001\002\000\054\007\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\026\uffb6\030\uffb6\031\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\053\uffb6\054\uffb6\057\uffb6\074\uffb6\075\uffb6\077\uffb6\001" +
    "\002\000\006\005\135\061\134\001\002\000\054\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\026\uffb8\030\uffb8\031" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\053\uffb8\054\uffb8\057\uffb8\074\uffb8\075\uffb8\077" +
    "\uffb8\001\002\000\054\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\026\uffa8\030\uffa8\031\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8" +
    "\057\uffa8\074\uffa8\075\uffa8\077\uffa8\001\002\000\026\010" +
    "\126\011\120\012\123\013\127\026\121\040\116\041\132" +
    "\043\130\051\122\057\124\001\002\000\054\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\026\uffbb\030\uffbb\031\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\053\uffbb\054\uffbb\057\uffbb\074\uffbb\075\uffbb\077\uffbb" +
    "\001\002\000\054\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\026\uffbc\030\uffbc\031\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\057" +
    "\uffbc\074\uffbc\075\uffbc\077\uffbc\001\002\000\054\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\026\uffbe\030\uffbe\031" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\053\uffbe\054\uffbe\057\uffbe\074\uffbe\075\uffbe\077" +
    "\uffbe\001\002\000\034\005\uff9f\011\uff9f\023\uff9f\037\uff9f" +
    "\042\uff9f\044\uff9f\046\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\001\002\000\034\005\uffb0\011\uffb0" +
    "\023\uffb0\037\uffb0\042\uffb0\044\uffb0\046\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000\034" +
    "\005\uffb4\011\uffb4\023\uffb4\037\uffb4\042\uffb4\044\uffb4\046" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\001\002\000\034\005\uffb1\011\uffb1\023\uffb1\037\uffb1\042" +
    "\uffb1\044\uffb1\046\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\001\002\000\034\005\uff9c\011\uff9c\023" +
    "\uff9c\037\uff9c\042\uff9c\044\uff9c\046\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\034\005" +
    "\uffb3\011\uffb3\023\uffb3\037\uffb3\042\uffb3\044\uffb3\046\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\042\005\uffdb\006\uffdb\007\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\022\uffdb\024\uffdb\025\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\033\uffdb\047\uffdb\053\uffdb\001\002\000\050" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\026\uffd5\030" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\054\uffd5\057\uffd5\074\uffd5\075\uffd5\077\uffd5\001" +
    "\002\000\034\005\uffb5\011\uffb5\023\uffb5\037\uffb5\042\uffb5" +
    "\044\uffb5\046\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\001\002\000\034\005\uffb2\011\uffb2\023\uffb2" +
    "\037\uffb2\042\uffb2\044\uffb2\046\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000\034\005\uff9d" +
    "\011\uff9d\023\uff9d\037\uff9d\042\uff9d\044\uff9d\046\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\001\002" +
    "\000\034\005\076\011\107\023\114\037\075\042\006\044" +
    "\103\046\101\061\111\062\074\063\104\064\115\065\100" +
    "\066\106\001\002\000\034\005\uff9e\011\uff9e\023\uff9e\037" +
    "\uff9e\042\uff9e\044\uff9e\046\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\001\002\000\050\007\uffd8\010" +
    "\126\011\120\012\123\013\127\026\121\030\uffd8\040\116" +
    "\041\132\042\uffd8\043\130\047\uffd8\050\uffd8\051\122\054" +
    "\uffd8\057\uffd8\074\uffd8\075\uffd8\077\uffd8\001\002\000\054" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\026\uffaa\030" +
    "\uffaa\031\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\053\uffaa\054\uffaa\057\uffaa\074\uffaa\075" +
    "\uffaa\077\uffaa\001\002\000\054\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\026\uffa9\030\uffa9\031\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9" +
    "\054\uffa9\057\uffa9\074\uffa9\075\uffa9\077\uffa9\001\002\000" +
    "\026\010\126\011\120\012\123\013\127\026\121\040\116" +
    "\041\132\043\130\047\137\051\122\001\002\000\050\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\026\uffd6\030\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\054\uffd6\057\uffd6\074\uffd6\075\uffd6\077\uffd6\001\002" +
    "\000\004\021\141\001\002\000\054\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\026\uffa7\030\uffa7\031\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\047\uffa7\050\uffa7\051\uffa7\053" +
    "\uffa7\054\uffa7\057\uffa7\074\uffa7\075\uffa7\077\uffa7\001\002" +
    "\000\034\005\076\011\107\023\114\037\075\042\006\044" +
    "\103\046\101\061\111\062\074\063\104\064\115\065\100" +
    "\066\106\001\002\000\026\010\126\011\120\012\123\013" +
    "\127\026\121\040\116\041\132\043\130\047\144\051\122" +
    "\001\002\000\050\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\026\uffd7\030\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\054\uffd7\057\uffd7\074\uffd7\075" +
    "\uffd7\077\uffd7\001\002\000\026\005\071\014\044\015\057" +
    "\016\045\017\047\022\050\024\052\025\060\027\035\033" +
    "\042\001\002\000\010\030\uffe0\047\uffe0\053\uffe0\001\002" +
    "\000\004\014\150\001\002\000\004\030\151\001\002\000" +
    "\022\005\056\014\044\015\057\016\045\017\047\022\050" +
    "\024\052\025\060\001\002\000\004\055\153\001\002\000" +
    "\042\005\uffdd\006\uffdd\007\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\022\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\047\uffdd\053\uffdd\001\002\000\044\002\ufff7" +
    "\005\ufff7\032\ufff7\034\ufff7\042\ufff7\045\ufff7\053\ufff7\067" +
    "\ufff7\070\ufff7\071\ufff7\072\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\001\002\000\034\007\uffc7\010" +
    "\126\011\120\012\123\013\127\026\121\030\uffc7\040\116" +
    "\041\132\043\130\050\uffc7\051\122\057\uffc7\001\002\000" +
    "\010\007\uffe9\030\157\050\161\001\002\000\034\005\uffc5" +
    "\011\uffc5\023\uffc5\037\uffc5\042\uffc5\044\uffc5\046\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002" +
    "\000\034\005\076\011\107\023\114\037\075\042\006\044" +
    "\103\046\101\061\111\062\074\063\104\064\115\065\100" +
    "\066\106\001\002\000\034\005\uffc4\011\uffc4\023\uffc4\037" +
    "\uffc4\042\uffc4\044\uffc4\046\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\001\002\000\034\007\uffc8\010" +
    "\126\011\120\012\123\013\127\026\121\030\uffc8\040\116" +
    "\041\132\043\130\050\uffc8\051\122\057\uffc8\001\002\000" +
    "\004\007\uffea\001\002\000\004\046\165\001\002\000\014" +
    "\005\036\027\035\030\uffde\033\042\047\uffde\001\002\000" +
    "\006\030\063\047\167\001\002\000\004\052\ufffa\001\002" +
    "\000\030\005\015\032\014\034\010\042\006\045\024\053" +
    "\ufff8\067\017\072\023\100\012\102\004\105\026\001\002" +
    "\000\036\005\015\032\014\034\010\042\006\045\024\053" +
    "\ufff9\067\017\070\ufff9\071\ufff9\072\023\100\012\101\ufff9" +
    "\102\004\105\026\001\002\000\004\053\173\001\002\000" +
    "\006\007\175\031\174\001\002\000\026\005\071\014\044" +
    "\015\057\016\045\017\047\022\050\024\052\025\060\027" +
    "\035\033\042\001\002\000\010\002\ufffd\103\ufffd\104\ufffd" +
    "\001\002\000\004\007\177\001\002\000\010\002\ufffc\103" +
    "\ufffc\104\ufffc\001\002\000\026\005\015\032\014\034\010" +
    "\042\006\045\024\067\017\072\023\100\012\102\004\105" +
    "\026\001\002\000\030\005\015\032\014\034\010\042\006" +
    "\045\024\053\202\067\017\072\023\100\012\102\004\105" +
    "\026\001\002\000\004\007\203\001\002\000\010\002\ufffb" +
    "\103\ufffb\104\ufffb\001\002\000\034\005\076\011\107\023" +
    "\114\037\075\042\006\044\103\046\101\061\111\062\074" +
    "\063\104\064\115\065\100\066\106\001\002\000\036\010" +
    "\126\011\120\012\123\013\127\026\121\040\116\041\132" +
    "\043\130\047\uffad\051\122\054\225\074\222\075\221\077" +
    "\223\001\002\000\014\040\116\041\132\043\130\047\210" +
    "\051\122\001\002\000\014\040\uffab\041\uffab\043\uffab\047" +
    "\uffab\051\uffab\001\002\000\004\073\213\001\002\000\034" +
    "\005\076\011\107\023\114\037\075\042\006\044\103\046" +
    "\101\061\111\062\074\063\104\064\115\065\100\066\106" +
    "\001\002\000\014\040\uffac\041\uffac\043\uffac\047\uffac\051" +
    "\uffac\001\002\000\032\005\015\032\014\034\010\042\006" +
    "\045\024\067\017\070\ufff8\071\ufff8\072\023\100\012\102" +
    "\004\105\026\001\002\000\006\070\215\071\216\001\002" +
    "\000\044\002\ufff3\005\ufff3\032\ufff3\034\ufff3\042\ufff3\045" +
    "\ufff3\053\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\100\ufff3" +
    "\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\001\002\000" +
    "\026\005\015\032\014\034\010\042\006\045\024\067\017" +
    "\072\023\100\012\102\004\105\026\001\002\000\030\005" +
    "\015\032\014\034\010\042\006\045\024\067\017\070\220" +
    "\072\023\100\012\102\004\105\026\001\002\000\044\002" +
    "\ufff4\005\ufff4\032\ufff4\034\ufff4\042\ufff4\045\ufff4\053\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\100\ufff4\101\ufff4\102" +
    "\ufff4\103\ufff4\104\ufff4\105\ufff4\001\002\000\034\005\uffa4" +
    "\011\uffa4\023\uffa4\037\uffa4\042\uffa4\044\uffa4\046\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002" +
    "\000\034\005\uffa5\011\uffa5\023\uffa5\037\uffa5\042\uffa5\044" +
    "\uffa5\046\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\001\002\000\034\005\uffa2\011\uffa2\023\uffa2\037" +
    "\uffa2\042\uffa2\044\uffa2\046\uffa2\061\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\001\002\000\034\005\076\011" +
    "\107\023\114\037\075\042\006\044\103\046\101\061\111" +
    "\062\074\063\104\064\115\065\100\066\106\001\002\000" +
    "\034\005\uffa3\011\uffa3\023\uffa3\037\uffa3\042\uffa3\044\uffa3" +
    "\046\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\001\002\000\026\010\126\011\120\012\123\013\127" +
    "\026\121\040\116\041\132\043\130\047\uffae\051\122\001" +
    "\002\000\046\005\261\007\uffc6\011\107\023\114\027\035" +
    "\030\uffc6\033\042\037\075\042\006\044\103\046\101\050" +
    "\uffc6\061\111\062\074\063\104\064\115\065\100\066\106" +
    "\001\002\000\026\005\071\014\044\015\057\016\045\017" +
    "\047\022\050\024\052\025\060\027\035\033\042\001\002" +
    "\000\010\007\uffe6\030\157\050\161\001\002\000\006\006" +
    "\233\007\uffee\001\002\000\046\005\076\007\uffc6\011\107" +
    "\023\114\030\uffc6\037\075\042\006\044\103\046\101\050" +
    "\uffc6\052\237\056\234\061\111\062\074\063\104\064\115" +
    "\065\100\066\106\001\002\000\042\005\076\011\107\023" +
    "\114\030\uffc6\037\075\042\006\044\103\046\101\050\uffc6" +
    "\057\uffc6\061\111\062\074\063\104\064\115\065\100\066" +
    "\106\001\002\000\004\007\ufff0\001\002\000\004\007\uffef" +
    "\001\002\000\036\005\076\011\107\023\114\030\uffcf\042" +
    "\006\044\103\052\244\053\uffcf\061\111\062\074\063\104" +
    "\064\115\065\100\066\106\001\002\000\010\007\uffca\030" +
    "\157\050\161\001\002\000\006\030\uffd0\053\uffd0\001\002" +
    "\000\006\030\255\053\254\001\002\000\004\031\252\001" +
    "\002\000\032\005\076\011\107\023\114\042\006\044\103" +
    "\053\246\061\111\062\074\063\104\064\115\065\100\066" +
    "\106\001\002\000\004\031\247\001\002\000\006\030\uffcd" +
    "\053\uffcd\001\002\000\030\005\076\011\107\023\114\042" +
    "\006\044\103\061\111\062\074\063\104\064\115\065\100" +
    "\066\106\001\002\000\004\053\251\001\002\000\006\030" +
    "\uffcc\053\uffcc\001\002\000\030\005\076\011\107\023\114" +
    "\042\006\044\103\061\111\062\074\063\104\064\115\065" +
    "\100\066\106\001\002\000\006\030\uffce\053\uffce\001\002" +
    "\000\004\007\uffd2\001\002\000\032\005\076\011\107\023" +
    "\114\042\006\044\103\052\244\061\111\062\074\063\104" +
    "\064\115\065\100\066\106\001\002\000\006\030\uffd1\053" +
    "\uffd1\001\002\000\010\030\157\050\161\057\260\001\002" +
    "\000\004\007\uffcb\001\002\000\036\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\020\140\026\uffa6\030\uffa6\040\uffa6" +
    "\041\uffa6\043\uffa6\050\uffa6\051\uffa6\056\072\001\002\000" +
    "\004\007\uffec\001\002\000\010\007\uffed\030\157\050\161" +
    "\001\002\000\010\007\uffe8\030\157\050\161\001\002\000" +
    "\044\002\ufff2\005\ufff2\032\ufff2\034\ufff2\042\ufff2\045\ufff2" +
    "\053\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\100\ufff2\101" +
    "\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\001\002\000\004" +
    "\101\267\001\002\000\044\002\ufff5\005\ufff5\032\ufff5\034" +
    "\ufff5\042\ufff5\045\ufff5\053\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105" +
    "\ufff5\001\002\000\026\005\071\014\044\015\057\016\045" +
    "\017\047\022\050\024\052\025\060\027\035\033\042\001" +
    "\002\000\004\007\uffe5\001\002\000\026\010\126\011\120" +
    "\012\123\013\127\026\121\040\116\041\132\042\273\043" +
    "\130\051\122\001\002\000\004\005\274\001\002\000\004" +
    "\046\275\001\002\000\040\005\076\011\107\023\114\030" +
    "\uffc1\037\075\042\006\044\103\046\101\047\uffc1\061\111" +
    "\062\074\063\104\064\115\065\100\066\106\001\002\000" +
    "\006\030\300\047\301\001\002\000\030\010\126\011\120" +
    "\012\123\013\127\026\121\030\uffc2\040\116\041\132\043" +
    "\130\047\uffc2\051\122\001\002\000\034\005\076\011\107" +
    "\023\114\037\075\042\006\044\103\046\101\061\111\062" +
    "\074\063\104\064\115\065\100\066\106\001\002\000\054" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\026\uffaf\030" +
    "\uffaf\031\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\053\uffaf\054\uffaf\057\uffaf\074\uffaf\075" +
    "\uffaf\077\uffaf\001\002\000\030\010\126\011\120\012\123" +
    "\013\127\026\121\030\uffc3\040\116\041\132\043\130\047" +
    "\uffc3\051\122\001\002\000\010\007\uffe7\030\157\050\161" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\024\002\024\003\004\006\012\011\006\012" +
    "\020\014\026\026\015\035\010\054\027\001\001\000\022" +
    "\007\154\026\076\037\112\043\101\047\302\051\104\052" +
    "\072\053\107\001\001\000\002\001\001\000\020\007\271" +
    "\026\076\037\112\043\101\051\104\052\072\053\107\001" +
    "\001\000\002\001\001\000\020\021\052\022\050\023\053" +
    "\024\045\025\066\055\065\056\267\001\001\000\002\001" +
    "\001\000\020\002\170\003\004\006\012\013\265\026\015" +
    "\035\010\054\027\001\001\000\002\001\001\000\022\007" +
    "\154\026\076\037\112\043\101\047\263\051\104\052\072" +
    "\053\107\001\001\000\022\007\154\026\076\037\112\043" +
    "\101\047\230\051\104\052\072\053\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\154" +
    "\026\076\037\112\043\101\047\155\051\104\052\072\053" +
    "\107\001\001\000\014\003\153\006\012\026\015\035\010" +
    "\054\027\001\001\000\002\001\001\000\006\011\031\012" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\037\016\040\055" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\052\022\050\023\053\024\045\025\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\063\055\036\001\001\000\002\001\001\000\020\021\052" +
    "\022\050\023\053\024\045\025\066\055\065\056\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\111\026\076\037\112\043" +
    "\101\051\104\052\072\053\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\135\026\076" +
    "\037\112\043\101\051\104\052\072\053\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\130\036\116\053\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\132\026\076\037" +
    "\112\043\101\051\104\052\072\053\107\001\001\000\002" +
    "\001\001\000\010\010\130\036\116\053\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\130\036\116" +
    "\053\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\142\026\076\037\112\043\101" +
    "\051\104\052\072\053\107\001\001\000\010\010\130\036" +
    "\116\053\124\001\001\000\002\001\001\000\020\021\052" +
    "\022\050\023\053\024\045\025\066\055\065\056\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\052\022\050\023\053\024\045\025\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\130\036\116\053\124\001\001\000\004\020" +
    "\157\001\001\000\002\001\001\000\020\007\161\026\076" +
    "\037\112\043\101\051\104\052\072\053\107\001\001\000" +
    "\002\001\001\000\010\010\130\036\116\053\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\165\016" +
    "\040\055\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\170\003\004\006\012\013\171\026\015\035" +
    "\010\054\027\001\001\000\014\003\153\006\012\026\015" +
    "\035\010\054\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\052\022\050\023\053\024\045\025\066" +
    "\055\065\056\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\200\003\004\006\012" +
    "\026\015\035\010\054\027\001\001\000\014\003\153\006" +
    "\012\026\015\035\010\054\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\204\026\076\032\206\037" +
    "\112\043\101\046\205\051\104\052\072\053\107\001\001" +
    "\000\012\010\130\033\223\036\116\053\124\001\001\000" +
    "\004\036\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\204\026\076\032\211\037\112\043\101\051" +
    "\104\052\072\053\107\001\001\000\002\001\001\000\020" +
    "\002\170\003\004\006\012\013\213\026\015\035\010\054" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\216\003\004\006\012\026\015\035\010\054\027\001" +
    "\001\000\014\003\153\006\012\026\015\035\010\054\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\225\026\076\037\112" +
    "\043\101\051\104\052\072\053\107\001\001\000\002\001" +
    "\001\000\010\010\130\036\116\053\124\001\001\000\024" +
    "\007\154\026\076\037\112\043\101\047\262\051\104\052" +
    "\072\053\107\055\261\001\001\000\020\021\052\022\050" +
    "\023\053\024\045\025\066\055\065\056\231\001\001\000" +
    "\004\020\157\001\001\000\002\001\001\000\026\007\154" +
    "\026\076\031\235\037\112\043\101\047\237\050\234\051" +
    "\104\052\072\053\107\001\001\000\022\007\154\026\076" +
    "\037\112\043\101\047\256\051\104\052\072\053\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\076" +
    "\027\240\030\241\037\112\043\101\051\242\052\072\053" +
    "\107\001\001\000\004\020\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\076\037" +
    "\112\043\101\051\244\052\072\053\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\076\037\112\043" +
    "\101\051\247\052\072\053\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\076\037\112\043\101\051" +
    "\252\052\072\053\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\026\076\027\255\037\112\043\101\051" +
    "\242\052\072\053\107\001\001\000\002\001\001\000\004" +
    "\020\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\157\001\001\000\004\020\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\052\022\050\023\053\024\045\025\066" +
    "\055\065\056\270\001\001\000\002\001\001\000\010\010" +
    "\130\036\116\053\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\276\026\076\037\112\040\275\043" +
    "\101\051\104\052\072\053\107\001\001\000\002\001\001" +
    "\000\010\010\130\036\116\053\124\001\001\000\020\007" +
    "\301\026\076\037\112\043\101\051\104\052\072\053\107" +
    "\001\001\000\002\001\001\000\010\010\130\036\116\053" +
    "\124\001\001\000\004\020\157\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= methods EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // methods ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY COL merged_type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_declaration ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // special_statement ::= LOOP method_body POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // special_statement ::= IF LPAREN comparison_parameters RPAREN THEN method_body ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // special_statement ::= IF LPAREN comparison_parameters RPAREN THEN method_body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= special_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // full_exp ::= IDENTIFIER COL merged_type EQUAL array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // full_exp ::= IDENTIFIER COL merged_type EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // full_exp ::= IDENTIFIER COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // full_exp ::= IDENTIFIER EQUAL list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= IDENTIFIER EQUAL complex_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= PRINT list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= RETURN list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= READ list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // full_exp ::= IDENTIFIER list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // full_exp ::= ALIAS merged_type merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // full_exp ::= custom_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter ::= IDENTIFIER COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter ::= complex_type COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // complex_type ::= DICT LPAREN_TRI INT COMMA type RPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // complex_type ::= SEQ LPAREN_TRI type RPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // complex_type ::= IDENTIFIER LPAREN_SQ simple_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // merged_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("merged_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // merged_type ::= complex_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("merged_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_exp ::= NOT LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= simple_exp negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // array ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // array ::= list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list ::= list delimitors simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // delimitors ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // delimitors ::= CONCAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparables_list ::= comparables_list COMMA simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparables_list ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparables_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparables_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // value ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // value ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // value ::= negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_call ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN comparables_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparison ::= simple_exp comparison_operators simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparison ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparison_parameters ::= comparison_parameters boolean_twoway_operators comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparison_parameters ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // negative ::= MINUS INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // negative ::= MINUS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // boolean_twoway_operators ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
