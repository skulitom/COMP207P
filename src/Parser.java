
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\057\005\000\002\002\004\000\002\057" +
    "\004\000\002\057\004\000\002\057\003\000\002\014\004" +
    "\000\002\014\003\000\002\014\003\000\002\011\007\000" +
    "\002\011\011\000\002\060\007\000\002\012\007\000\002" +
    "\013\003\000\002\013\002\000\002\002\004\000\002\002" +
    "\003\000\002\054\005\000\002\054\013\000\002\054\011" +
    "\000\002\003\004\000\002\003\003\000\002\006\007\000" +
    "\002\006\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\005" +
    "\000\002\006\003\000\002\006\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\002\000\002\055\010\000\002\055\006\000\002\055" +
    "\006\000\002\056\003\000\002\056\003\000\002\007\005" +
    "\000\002\007\006\000\002\007\005\000\002\007\004\000" +
    "\002\007\003\000\002\007\003\000\002\035\007\000\002" +
    "\031\005\000\002\030\005\000\002\030\003\000\002\030" +
    "\002\000\002\027\005\000\002\027\004\000\002\027\007" +
    "\000\002\052\003\000\002\047\005\000\002\047\005\000" +
    "\002\047\003\000\002\047\002\000\002\020\003\000\002" +
    "\020\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\037\003\000\002\037\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\026\011" +
    "\000\002\046\005\000\002\046\003\000\002\053\004\000" +
    "\002\053\004\000\002\043\003\000\002\043\005\000\002" +
    "\043\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\021\003\000\002\021" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\032\005\016\032\015\034\011\042\007\045" +
    "\026\067\020\072\024\100\013\102\004\103\022\104\025" +
    "\105\030\001\002\000\050\005\101\007\uffc3\011\112\023" +
    "\117\027\040\030\uffc3\033\045\037\100\042\007\044\106" +
    "\046\104\050\uffc3\056\166\061\114\062\077\063\107\064" +
    "\121\065\103\066\111\001\002\000\032\002\ufffd\005\016" +
    "\032\015\034\011\042\007\045\026\067\020\072\024\100" +
    "\013\102\004\104\025\105\030\001\002\000\044\002\ufff2" +
    "\005\ufff2\032\ufff2\034\ufff2\042\ufff2\045\ufff2\053\ufff2\067" +
    "\ufff2\070\ufff2\071\ufff2\072\ufff2\100\ufff2\101\ufff2\102\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\001\002\000\040\005\101\011" +
    "\112\023\117\027\040\033\045\037\100\042\007\044\106" +
    "\046\104\061\114\062\077\063\107\064\121\065\103\066" +
    "\111\001\002\000\010\002\ufffb\103\ufffb\104\ufffb\001\002" +
    "\000\026\005\074\014\047\015\063\016\050\017\052\022" +
    "\053\024\055\025\062\027\040\033\045\001\002\000\004" +
    "\007\uffe1\001\002\000\030\005\016\032\015\034\011\042" +
    "\007\045\026\067\020\072\024\100\013\101\ufff4\102\004" +
    "\105\030\001\002\000\004\007\263\001\002\000\050\005" +
    "\101\007\uffc3\011\112\023\117\027\040\030\uffc3\033\045" +
    "\037\100\042\007\044\106\046\104\050\uffc3\056\166\061" +
    "\114\062\077\063\107\064\121\065\103\066\111\001\002" +
    "\000\054\005\101\006\232\007\uffc3\011\112\023\117\027" +
    "\040\030\uffc3\031\233\033\045\037\100\042\007\044\106" +
    "\046\104\050\uffc3\056\166\061\114\062\077\063\107\064" +
    "\121\065\103\066\111\001\002\000\004\007\uffe8\001\002" +
    "\000\004\046\221\001\002\000\004\002\220\001\002\000" +
    "\004\052\214\001\002\000\004\052\204\001\002\000\006" +
    "\007\uffe0\061\203\001\002\000\004\005\177\001\002\000" +
    "\050\005\101\007\uffc3\011\112\023\117\027\040\030\uffc3" +
    "\033\045\037\100\042\007\044\106\046\104\050\uffc3\056" +
    "\166\061\114\062\077\063\107\064\121\065\103\066\111" +
    "\001\002\000\034\002\ufffa\005\016\032\015\034\011\042" +
    "\007\045\026\067\020\072\024\100\013\102\004\103\ufffa" +
    "\104\ufffa\105\030\001\002\000\004\005\036\001\002\000" +
    "\006\103\022\104\025\001\002\000\044\002\uffed\005\uffed" +
    "\032\uffed\034\uffed\042\uffed\045\uffed\053\uffed\067\uffed\070" +
    "\uffed\071\uffed\072\uffed\100\uffed\101\uffed\102\uffed\103\uffed" +
    "\104\uffed\105\uffed\001\002\000\032\002\ufffe\005\016\032" +
    "\015\034\011\042\007\045\026\067\020\072\024\100\013" +
    "\102\004\104\025\105\030\001\002\000\010\002\ufffc\103" +
    "\ufffc\104\ufffc\001\002\000\006\002\001\104\025\001\002" +
    "\000\004\052\037\001\002\000\014\005\041\027\040\030" +
    "\uffdb\033\045\053\uffdb\001\002\000\004\054\160\001\002" +
    "\000\006\031\156\056\075\001\002\000\004\031\070\001" +
    "\002\000\006\030\065\053\066\001\002\000\010\030\uffde" +
    "\047\uffde\053\uffde\001\002\000\004\054\046\001\002\000" +
    "\022\005\061\014\047\015\063\016\050\017\052\022\053" +
    "\024\055\025\062\001\002\000\042\005\uff94\006\uff94\007" +
    "\uff94\014\uff94\015\uff94\016\uff94\017\uff94\022\uff94\024\uff94" +
    "\025\uff94\027\uff94\030\uff94\033\uff94\047\uff94\053\uff94\055" +
    "\uff94\001\002\000\042\005\uff97\006\uff97\007\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\022\uff97\024\uff97\025\uff97\027" +
    "\uff97\030\uff97\033\uff97\047\uff97\053\uff97\055\uff97\001\002" +
    "\000\042\005\uff96\006\uff96\007\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\022\uff96\024\uff96\025\uff96\027\uff96\030\uff96" +
    "\033\uff96\047\uff96\053\uff96\055\uff96\001\002\000\042\005" +
    "\uff9b\006\uff9b\007\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\022\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\033\uff9b\047" +
    "\uff9b\053\uff9b\055\uff9b\001\002\000\042\005\uff9a\006\uff9a" +
    "\007\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\022\uff9a\024" +
    "\uff9a\025\uff9a\027\uff9a\030\uff9a\033\uff9a\047\uff9a\053\uff9a" +
    "\055\uff9a\001\002\000\042\005\uff95\006\uff95\007\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\022\uff95\024\uff95\025\uff95" +
    "\027\uff95\030\uff95\033\uff95\047\uff95\053\uff95\055\uff95\001" +
    "\002\000\042\005\uff91\006\uff91\007\uff91\014\uff91\015\uff91" +
    "\016\uff91\017\uff91\022\uff91\024\uff91\025\uff91\027\uff91\030" +
    "\uff91\033\uff91\047\uff91\053\uff91\055\uff91\001\002\000\042" +
    "\005\uff9c\006\uff9c\007\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\022\uff9c\024\uff9c\025\uff9c\027\uff9c\030\uff9c\033\uff9c" +
    "\047\uff9c\053\uff9c\055\uff9c\001\002\000\042\005\uff98\006" +
    "\uff98\007\uff98\014\uff98\015\uff98\016\uff98\017\uff98\022\uff98" +
    "\024\uff98\025\uff98\027\uff98\030\uff98\033\uff98\047\uff98\053" +
    "\uff98\055\uff98\001\002\000\004\055\064\001\002\000\004" +
    "\055\uff99\001\002\000\042\005\uff93\006\uff93\007\uff93\014" +
    "\uff93\015\uff93\016\uff93\017\uff93\022\uff93\024\uff93\025\uff93" +
    "\027\uff93\030\uff93\033\uff93\047\uff93\053\uff93\055\uff93\001" +
    "\002\000\042\005\uff92\006\uff92\007\uff92\014\uff92\015\uff92" +
    "\016\uff92\017\uff92\022\uff92\024\uff92\025\uff92\027\uff92\030" +
    "\uff92\033\uff92\047\uff92\053\uff92\055\uff92\001\002\000\102" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\053\uffd9\054\uffd9\057\uffd9\074\uffd9\075\uffd9\077\uffd9\001" +
    "\002\000\016\005\041\027\040\030\uffdb\033\045\047\uffdb" +
    "\053\uffdb\001\002\000\004\007\uffcf\001\002\000\010\030" +
    "\uffdf\047\uffdf\053\uffdf\001\002\000\026\005\074\014\047" +
    "\015\063\016\050\017\052\022\053\024\055\025\062\027" +
    "\040\033\045\001\002\000\040\005\uffd6\006\uffd6\007\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\033\uffd6\047\uffd6\053\uffd6\001\002" +
    "\000\040\005\uffd7\006\uffd7\007\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\022\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7" +
    "\033\uffd7\047\uffd7\053\uffd7\001\002\000\010\030\uffdc\047" +
    "\uffdc\053\uffdc\001\002\000\042\005\uff99\006\uff99\007\uff99" +
    "\014\uff99\015\uff99\016\uff99\017\uff99\022\uff99\024\uff99\025" +
    "\uff99\027\uff99\030\uff99\033\uff99\047\uff99\053\uff99\056\075" +
    "\001\002\000\040\005\101\011\112\023\117\027\040\033" +
    "\045\037\100\042\007\044\106\046\104\061\114\062\077" +
    "\063\107\064\121\065\103\066\111\001\002\000\054\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\026\uffb9\030\uffb9" +
    "\031\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\053\uffb9\054\uffb9\057\uffb9\074\uffb9\075\uffb9" +
    "\077\uffb9\001\002\000\054\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\026\uffbf\030\uffbf\031\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\047\uffbf\050\uffbf\051\uffbf\053\uffbf\054" +
    "\uffbf\057\uffbf\074\uffbf\075\uffbf\077\uffbf\001\002\000\004" +
    "\046\153\001\002\000\054\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\020\151\026\uffa7\030\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\047\uffa7\050\uffa7\051\uffa7\054\uffa7\056" +
    "\075\057\uffa7\074\uffa7\075\uffa7\077\uffa7\001\002\000\054" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\026\uffba\030" +
    "\uffba\031\uffba\040\uffba\041\uffba\042\uffba\043\uffba\047\uffba" +
    "\050\uffba\051\uffba\053\uffba\054\uffba\057\uffba\074\uffba\075" +
    "\uffba\077\uffba\001\002\000\054\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\026\uffb7\030\uffb7\031\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\047\uffb7\050\uffb7\051\uffb7\053\uffb7" +
    "\054\uffb7\057\uffb7\074\uffb7\075\uffb7\077\uffb7\001\002\000" +
    "\040\005\101\011\112\023\117\027\040\033\045\037\100" +
    "\042\007\044\106\046\104\061\114\062\077\063\107\064" +
    "\121\065\103\066\111\001\002\000\054\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\026\uffc0\030\uffc0\031\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\053\uffc0\054\uffc0\057\uffc0\074\uffc0\075\uffc0\077\uffc0\001" +
    "\002\000\054\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\026\uffc7\030\uffc7\031\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\057\uffc7" +
    "\074\uffc7\075\uffc7\077\uffc7\001\002\000\054\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\026\uffbd\030\uffbd\031\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\053\uffbd\054\uffbd\057\uffbd\074\uffbd\075\uffbd\077\uffbd" +
    "\001\002\000\050\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\026\uffd0\030\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\054\uffd0\057\uffd0\074\uffd0\075" +
    "\uffd0\077\uffd0\001\002\000\054\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\026\uffb6\030\uffb6\031\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6" +
    "\054\uffb6\057\uffb6\074\uffb6\075\uffb6\077\uffb6\001\002\000" +
    "\006\005\145\061\144\001\002\000\054\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\026\uffb8\030\uffb8\031\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\053\uffb8\054\uffb8\057\uffb8\074\uffb8\075\uffb8\077\uffb8\001" +
    "\002\000\054\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\026\uffa9\030\uffa9\031\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9\057\uffa9" +
    "\074\uffa9\075\uffa9\077\uffa9\001\002\000\036\010\125\011" +
    "\137\012\134\013\136\026\132\040\123\041\126\043\140" +
    "\051\127\054\135\057\133\074\143\075\142\077\130\001" +
    "\002\000\050\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\026\uffd1\030\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\054\uffd1\057\uffd1\074\uffd1\075\uffd1" +
    "\077\uffd1\001\002\000\054\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\026\uffbc\030\uffbc\031\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc\054" +
    "\uffbc\057\uffbc\074\uffbc\075\uffbc\077\uffbc\001\002\000\054" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\026\uffbb\030" +
    "\uffbb\031\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\053\uffbb\054\uffbb\057\uffbb\074\uffbb\075" +
    "\uffbb\077\uffbb\001\002\000\054\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\026\uffbe\030\uffbe\031\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe" +
    "\054\uffbe\057\uffbe\074\uffbe\075\uffbe\077\uffbe\001\002\000" +
    "\040\005\101\011\112\023\117\027\040\033\045\037\100" +
    "\042\007\044\106\046\104\061\114\062\077\063\107\064" +
    "\121\065\103\066\111\001\002\000\040\005\uffa0\011\uffa0" +
    "\023\uffa0\027\uffa0\033\uffa0\037\uffa0\042\uffa0\044\uffa0\046" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\001\002\000\040\005\uffb0\011\uffb0\023\uffb0\027\uffb0\033" +
    "\uffb0\037\uffb0\042\uffb0\044\uffb0\046\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000\040\005" +
    "\uffb5\011\uffb5\023\uffb5\027\uffb5\033\uffb5\037\uffb5\042\uffb5" +
    "\044\uffb5\046\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\001\002\000\040\005\uff9f\011\uff9f\023\uff9f" +
    "\027\uff9f\033\uff9f\037\uff9f\042\uff9f\044\uff9f\046\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\001\002" +
    "\000\040\005\uff9d\011\uff9d\023\uff9d\027\uff9d\033\uff9d\037" +
    "\uff9d\042\uff9d\044\uff9d\046\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\uff9d\001\002\000\040\005\uffa3\011" +
    "\uffa3\023\uffa3\027\uffa3\033\uffa3\037\uffa3\042\uffa3\044\uffa3" +
    "\046\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\001\002\000\040\005\uffaf\011\uffaf\023\uffaf\027\uffaf" +
    "\033\uffaf\037\uffaf\042\uffaf\044\uffaf\046\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000\040" +
    "\005\uffb1\011\uffb1\023\uffb1\027\uffb1\033\uffb1\037\uffb1\042" +
    "\uffb1\044\uffb1\046\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\001\002\000\102\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\033\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8\057" +
    "\uffd8\074\uffd8\075\uffd8\077\uffd8\001\002\000\040\005\uffb3" +
    "\011\uffb3\023\uffb3\027\uffb3\033\uffb3\037\uffb3\042\uffb3\044" +
    "\uffb3\046\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\001\002\000\040\005\uffa4\011\uffa4\023\uffa4\027" +
    "\uffa4\033\uffa4\037\uffa4\042\uffa4\044\uffa4\046\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000" +
    "\040\005\uffb2\011\uffb2\023\uffb2\027\uffb2\033\uffb2\037\uffb2" +
    "\042\uffb2\044\uffb2\046\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\001\002\000\040\005\uffb4\011\uffb4" +
    "\023\uffb4\027\uffb4\033\uffb4\037\uffb4\042\uffb4\044\uffb4\046" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\001\002\000\040\005\uff9e\011\uff9e\023\uff9e\027\uff9e\033" +
    "\uff9e\037\uff9e\042\uff9e\044\uff9e\046\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\001\002\000\050\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\026\uffd2\030\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\054\uffd2\057\uffd2\074\uffd2\075\uffd2\077\uffd2\001\002" +
    "\000\040\005\uffa5\011\uffa5\023\uffa5\027\uffa5\033\uffa5\037" +
    "\uffa5\042\uffa5\044\uffa5\046\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\001\002\000\040\005\uffa6\011" +
    "\uffa6\023\uffa6\027\uffa6\033\uffa6\037\uffa6\042\uffa6\044\uffa6" +
    "\046\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\001\002\000\054\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\026\uffab\030\uffab\031\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\047\uffab\050\uffab\051\uffab\053\uffab\054\uffab" +
    "\057\uffab\074\uffab\075\uffab\077\uffab\001\002\000\054\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\026\uffaa\030\uffaa" +
    "\031\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\053\uffaa\054\uffaa\057\uffaa\074\uffaa\075\uffaa" +
    "\077\uffaa\001\002\000\050\007\uffd5\010\125\011\137\012" +
    "\134\013\136\026\132\030\uffd5\040\123\041\126\042\uffd5" +
    "\043\140\047\uffd5\050\uffd5\051\127\054\135\057\uffd5\074" +
    "\143\075\142\077\130\001\002\000\036\010\125\011\137" +
    "\012\134\013\136\026\132\040\123\041\126\043\140\047" +
    "\150\051\127\054\135\074\143\075\142\077\130\001\002" +
    "\000\050\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\026" +
    "\uffd3\030\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\054\uffd3\057\uffd3\074\uffd3\075\uffd3\077" +
    "\uffd3\001\002\000\004\021\152\001\002\000\054\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\026\uffa8\030\uffa8\031" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\054\uffa8\057\uffa8\074\uffa8\075\uffa8\077" +
    "\uffa8\001\002\000\040\005\101\011\112\023\117\027\040" +
    "\033\045\037\100\042\007\044\106\046\104\061\114\062" +
    "\077\063\107\064\121\065\103\066\111\001\002\000\036" +
    "\010\125\011\137\012\134\013\136\026\132\040\123\041" +
    "\126\043\140\047\155\051\127\054\135\074\143\075\142" +
    "\077\130\001\002\000\050\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\026\uffd4\030\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\057\uffd4\074" +
    "\uffd4\075\uffd4\077\uffd4\001\002\000\026\005\074\014\047" +
    "\015\063\016\050\017\052\022\053\024\055\025\062\027" +
    "\040\033\045\001\002\000\010\030\uffdd\047\uffdd\053\uffdd" +
    "\001\002\000\004\014\161\001\002\000\004\030\162\001" +
    "\002\000\022\005\061\014\047\015\063\016\050\017\052" +
    "\022\053\024\055\025\062\001\002\000\004\055\164\001" +
    "\002\000\102\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\033\uffda\040\uffda\041\uffda\042\uffda\043\uffda\047\uffda\050" +
    "\uffda\051\uffda\053\uffda\054\uffda\057\uffda\074\uffda\075\uffda" +
    "\077\uffda\001\002\000\044\002\ufff3\005\ufff3\032\ufff3\034" +
    "\ufff3\042\ufff3\045\ufff3\053\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105" +
    "\ufff3\001\002\000\050\005\101\011\112\023\117\027\040" +
    "\030\uffc3\033\045\037\100\042\007\044\106\046\104\050" +
    "\uffc3\056\166\057\uffc3\061\114\062\077\063\107\064\121" +
    "\065\103\066\111\001\002\000\046\007\uffc4\010\125\011" +
    "\137\012\134\013\136\026\132\030\uffc4\040\123\041\126" +
    "\043\140\047\uffc4\050\uffc4\051\127\054\135\057\uffc4\074" +
    "\143\075\142\077\130\001\002\000\010\007\uffe6\030\171" +
    "\050\173\001\002\000\040\005\uffc2\011\uffc2\023\uffc2\027" +
    "\uffc2\033\uffc2\037\uffc2\042\uffc2\044\uffc2\046\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000" +
    "\040\005\101\011\112\023\117\027\040\033\045\037\100" +
    "\042\007\044\106\046\104\061\114\062\077\063\107\064" +
    "\121\065\103\066\111\001\002\000\040\005\uffc1\011\uffc1" +
    "\023\uffc1\027\uffc1\033\uffc1\037\uffc1\042\uffc1\044\uffc1\046" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\001\002\000\046\007\uffc5\010\125\011\137\012\134\013" +
    "\136\026\132\030\uffc5\040\123\041\126\043\140\047\uffc5" +
    "\050\uffc5\051\127\054\135\057\uffc5\074\143\075\142\077" +
    "\130\001\002\000\010\030\171\050\173\057\176\001\002" +
    "\000\014\007\uffc6\030\uffc6\047\uffc6\050\uffc6\057\uffc6\001" +
    "\002\000\004\046\200\001\002\000\014\005\041\027\040" +
    "\030\uffdb\033\045\047\uffdb\001\002\000\006\030\065\047" +
    "\202\001\002\000\004\052\ufff6\001\002\000\004\007\uffe7" +
    "\001\002\000\030\005\016\032\015\034\011\042\007\045" +
    "\026\053\ufff4\067\020\072\024\100\013\102\004\105\030" +
    "\001\002\000\036\005\016\032\015\034\011\042\007\045" +
    "\026\053\ufff5\067\020\070\ufff5\071\ufff5\072\024\100\013" +
    "\101\ufff5\102\004\105\030\001\002\000\004\053\207\001" +
    "\002\000\006\007\211\031\210\001\002\000\026\005\074" +
    "\014\047\015\063\016\050\017\052\022\053\024\055\025" +
    "\062\027\040\033\045\001\002\000\010\002\ufff9\103\ufff9" +
    "\104\ufff9\001\002\000\004\007\213\001\002\000\010\002" +
    "\ufff8\103\ufff8\104\ufff8\001\002\000\026\005\016\032\015" +
    "\034\011\042\007\045\026\067\020\072\024\100\013\102" +
    "\004\105\030\001\002\000\030\005\016\032\015\034\011" +
    "\042\007\045\026\053\216\067\020\072\024\100\013\102" +
    "\004\105\030\001\002\000\004\007\217\001\002\000\032" +
    "\002\ufff7\005\ufff7\032\ufff7\034\ufff7\042\ufff7\045\ufff7\067" +
    "\ufff7\072\ufff7\100\ufff7\102\ufff7\104\ufff7\105\ufff7\001\002" +
    "\000\004\002\000\001\002\000\040\005\101\011\112\023" +
    "\117\027\040\033\045\037\100\042\007\044\106\046\104" +
    "\061\114\062\077\063\107\064\121\065\103\066\111\001" +
    "\002\000\036\010\125\011\137\012\134\013\136\026\132" +
    "\040\123\041\126\043\140\047\223\051\127\054\135\074" +
    "\143\075\142\077\130\001\002\000\004\073\224\001\002" +
    "\000\032\005\016\032\015\034\011\042\007\045\026\067" +
    "\020\070\ufff4\071\ufff4\072\024\100\013\102\004\105\030" +
    "\001\002\000\006\070\226\071\227\001\002\000\044\002" +
    "\uffef\005\uffef\032\uffef\034\uffef\042\uffef\045\uffef\053\uffef" +
    "\067\uffef\070\uffef\071\uffef\072\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\104\uffef\105\uffef\001\002\000\026\005\016" +
    "\032\015\034\011\042\007\045\026\067\020\072\024\100" +
    "\013\102\004\105\030\001\002\000\030\005\016\032\015" +
    "\034\011\042\007\045\026\067\020\070\231\072\024\100" +
    "\013\102\004\105\030\001\002\000\044\002\ufff0\005\ufff0" +
    "\032\ufff0\034\ufff0\042\ufff0\045\ufff0\053\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0" +
    "\104\ufff0\105\ufff0\001\002\000\050\005\101\007\uffc3\011" +
    "\112\023\117\027\040\030\uffc3\033\045\037\100\042\007" +
    "\044\106\046\104\050\uffc3\056\166\061\114\062\077\063" +
    "\107\064\121\065\103\066\111\001\002\000\026\005\074" +
    "\014\047\015\063\016\050\017\052\022\053\024\055\025" +
    "\062\027\040\033\045\001\002\000\010\007\uffe3\030\171" +
    "\050\173\001\002\000\006\006\236\007\uffea\001\002\000" +
    "\052\005\101\007\uffc3\011\112\023\117\027\040\030\uffc3" +
    "\033\045\037\100\042\007\044\106\046\104\050\uffc3\052" +
    "\240\056\166\061\114\062\077\063\107\064\121\065\103" +
    "\066\111\001\002\000\004\007\uffeb\001\002\000\036\005" +
    "\242\011\112\023\117\030\uffcb\042\007\044\106\052\246" +
    "\053\uffcb\061\114\062\077\063\107\064\121\065\103\066" +
    "\111\001\002\000\010\007\uffec\030\171\050\173\001\002" +
    "\000\012\020\151\030\uffa7\031\uffa7\053\uffa7\001\002\000" +
    "\006\030\uffcc\053\uffcc\001\002\000\006\030\256\053\257" +
    "\001\002\000\004\031\254\001\002\000\032\005\242\011" +
    "\112\023\117\042\007\044\106\053\250\061\114\062\077" +
    "\063\107\064\121\065\103\066\111\001\002\000\004\031" +
    "\251\001\002\000\006\030\uffc9\053\uffc9\001\002\000\030" +
    "\005\242\011\112\023\117\042\007\044\106\061\114\062" +
    "\077\063\107\064\121\065\103\066\111\001\002\000\004" +
    "\053\253\001\002\000\006\030\uffc8\053\uffc8\001\002\000" +
    "\030\005\242\011\112\023\117\042\007\044\106\061\114" +
    "\062\077\063\107\064\121\065\103\066\111\001\002\000" +
    "\006\030\uffca\053\uffca\001\002\000\032\005\242\011\112" +
    "\023\117\042\007\044\106\052\246\061\114\062\077\063" +
    "\107\064\121\065\103\066\111\001\002\000\004\007\uffce" +
    "\001\002\000\006\030\uffcd\053\uffcd\001\002\000\010\007" +
    "\uffe9\030\171\050\173\001\002\000\010\007\uffe5\030\171" +
    "\050\173\001\002\000\044\002\uffee\005\uffee\032\uffee\034" +
    "\uffee\042\uffee\045\uffee\053\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105" +
    "\uffee\001\002\000\004\101\265\001\002\000\044\002\ufff1" +
    "\005\ufff1\032\ufff1\034\ufff1\042\ufff1\045\ufff1\053\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\100\ufff1\101\ufff1\102\ufff1" +
    "\103\ufff1\104\ufff1\105\ufff1\001\002\000\026\005\074\014" +
    "\047\015\063\016\050\017\052\022\053\024\055\025\062" +
    "\027\040\033\045\001\002\000\004\007\uffe2\001\002\000" +
    "\036\010\125\011\137\012\134\013\136\026\132\040\123" +
    "\041\126\042\271\043\140\051\127\054\135\074\143\075" +
    "\142\077\130\001\002\000\004\005\272\001\002\000\004" +
    "\046\273\001\002\000\050\005\101\011\112\023\117\027" +
    "\040\030\uffc3\033\045\037\100\042\007\044\106\046\104" +
    "\047\uffc3\050\uffc3\056\166\061\114\062\077\063\107\064" +
    "\121\065\103\066\111\001\002\000\010\030\171\047\275" +
    "\050\173\001\002\000\054\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\026\uffae\030\uffae\031\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\047\uffae\050\uffae\051\uffae\053\uffae\054" +
    "\uffae\057\uffae\074\uffae\075\uffae\077\uffae\001\002\000\006" +
    "\002\uffff\104\025\001\002\000\010\007\uffe4\030\171\050" +
    "\173\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\030\002\026\003\005\006\013\011\007\012" +
    "\022\014\030\026\016\035\011\054\031\057\020\060\004" +
    "\001\001\000\024\007\166\026\101\037\117\043\104\047" +
    "\276\051\107\052\075\053\112\055\115\001\001\000\024" +
    "\002\026\003\005\006\013\011\007\012\022\014\275\026" +
    "\016\035\011\054\031\001\001\000\002\001\001\000\022" +
    "\007\267\026\101\037\117\043\104\051\107\052\075\053" +
    "\112\055\115\001\001\000\002\001\001\000\020\021\055" +
    "\022\053\023\056\024\050\025\071\055\070\056\265\001" +
    "\001\000\002\001\001\000\020\002\204\003\005\006\013" +
    "\013\263\026\016\035\011\054\031\001\001\000\002\001" +
    "\001\000\024\007\166\026\101\037\117\043\104\047\261" +
    "\051\107\052\075\053\112\055\115\001\001\000\024\007" +
    "\166\026\101\037\117\043\104\047\233\051\107\052\075" +
    "\053\112\055\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\166\026" +
    "\101\037\117\043\104\047\167\051\107\052\075\053\112" +
    "\055\115\001\001\000\014\003\164\006\013\026\016\035" +
    "\011\054\031\001\001\000\002\001\001\000\010\011\033" +
    "\012\022\060\032\001\001\000\002\001\001\000\024\002" +
    "\026\003\005\006\013\011\007\012\022\014\034\026\016" +
    "\035\011\054\031\001\001\000\002\001\001\000\006\011" +
    "\033\012\022\001\001\000\002\001\001\000\010\015\042" +
    "\016\043\055\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\055\022\053\023\056\024" +
    "\050\025\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\066" +
    "\055\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\055\022\053\023\056\024\050\025\071\055\070" +
    "\056\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\114\026\101" +
    "\037\117\043\104\051\107\052\075\053\112\055\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\146\026\101\037\117\043\104\051\107\052\075" +
    "\053\112\055\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\121\033\130\036\123\053\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\145\026\101\037\117\043\104\051\107" +
    "\052\075\053\112\055\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\121\033\130\036" +
    "\123\053\140\001\001\000\012\010\121\033\130\036\123" +
    "\053\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\153\026\101\037\117\043\104" +
    "\051\107\052\075\053\112\055\115\001\001\000\012\010" +
    "\121\033\130\036\123\053\140\001\001\000\002\001\001" +
    "\000\020\021\055\022\053\023\056\024\050\025\071\055" +
    "\070\056\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\055\022\053\023\056\024" +
    "\050\025\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\166\026\101\037\117\043" +
    "\104\047\174\051\107\052\075\053\112\055\115\001\001" +
    "\000\012\010\121\033\130\036\123\053\140\001\001\000" +
    "\004\020\171\001\001\000\002\001\001\000\022\007\173" +
    "\026\101\037\117\043\104\051\107\052\075\053\112\055" +
    "\115\001\001\000\002\001\001\000\012\010\121\033\130" +
    "\036\123\053\140\001\001\000\004\020\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\200\016\043" +
    "\055\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\204\003\005\006\013\013\205" +
    "\026\016\035\011\054\031\001\001\000\014\003\164\006" +
    "\013\026\016\035\011\054\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\055\022\053\023\056\024" +
    "\050\025\071\055\070\056\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\214\003" +
    "\005\006\013\026\016\035\011\054\031\001\001\000\014" +
    "\003\164\006\013\026\016\035\011\054\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\221\026\101\037\117\043\104\051\107\052\075\053" +
    "\112\055\115\001\001\000\012\010\121\033\130\036\123" +
    "\053\140\001\001\000\002\001\001\000\020\002\204\003" +
    "\005\006\013\013\224\026\016\035\011\054\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\227\003" +
    "\005\006\013\026\016\035\011\054\031\001\001\000\014" +
    "\003\164\006\013\026\016\035\011\054\031\001\001\000" +
    "\002\001\001\000\024\007\166\026\101\037\117\043\104" +
    "\047\260\051\107\052\075\053\112\055\115\001\001\000" +
    "\020\021\055\022\053\023\056\024\050\025\071\055\070" +
    "\056\234\001\001\000\004\020\171\001\001\000\002\001" +
    "\001\000\026\007\166\026\101\031\236\037\117\043\104" +
    "\047\240\051\107\052\075\053\112\055\115\001\001\000" +
    "\002\001\001\000\022\026\101\027\242\030\243\037\117" +
    "\043\104\051\244\052\075\053\112\001\001\000\004\020" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\101\037\117\043" +
    "\104\051\246\052\075\053\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\101\037\117\043\104\051" +
    "\251\052\075\053\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\101\037\117\043\104\051\254\052" +
    "\075\053\112\001\001\000\002\001\001\000\020\026\101" +
    "\027\257\037\117\043\104\051\244\052\075\053\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\171" +
    "\001\001\000\004\020\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\055\022\053" +
    "\023\056\024\050\025\071\055\070\056\266\001\001\000" +
    "\002\001\001\000\012\010\121\033\130\036\123\053\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\166\026\101\037\117\043\104\047\273\051\107\052\075" +
    "\053\112\055\115\001\001\000\004\020\171\001\001\000" +
    "\002\001\001\000\006\011\033\012\022\001\001\000\004" +
    "\020\171\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



    public boolean syntaxErrors;
    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null
        );
    }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= methods main_method methods 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main_method methods 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= methods main_method 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main_method 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methods ::= methods method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methods ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methods ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methods",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_declaration ::= method_header LPAREN_CURLY method_body RPAREN_CURLY COL merged_type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_method ::= MAIN_FUNC LPAREN_CURLY statements RPAREN_CURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_method",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_header ::= METHOD_DECLARATOR IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_header",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // special_statement ::= LOOP method_body POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // special_statement ::= IF LPAREN simple_exp RPAREN THEN method_body ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // special_statement ::= IF LPAREN simple_exp RPAREN THEN method_body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= full_exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= special_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // full_exp ::= IDENTIFIER COL merged_type EQUAL list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // full_exp ::= IDENTIFIER COL merged_type EQUAL dictionary_structure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // full_exp ::= IDENTIFIER COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // full_exp ::= IDENTIFIER EQUAL list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // full_exp ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // full_exp ::= BREAK INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // full_exp ::= PRINT list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // full_exp ::= RETURN list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // full_exp ::= READ list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // full_exp ::= IDENTIFIER list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // full_exp ::= ALIAS merged_type merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // full_exp ::= custom_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // full_exp ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter ::= IDENTIFIER COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter ::= complex_type COL merged_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // complex_type ::= DICT LPAREN_TRI INT COMMA type RPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // complex_type ::= SEQ LPAREN_TRI type RPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // complex_type ::= IDENTIFIER LPAREN_SQ simple_exp RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_type",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // merged_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("merged_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // merged_type ::= complex_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("merged_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= simple_exp operator_binary simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_exp ::= NOT LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_exp ::= LPAREN simple_exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_exp ::= simple_exp negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_exp ::= complex_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // custom_type ::= TYPE_DECLARATOR IDENTIFIER LPAREN_CURLY parameter_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dictionary_structure ::= LPAREN_CURLY dictionary_list RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dictionary_list ::= dictionary_list COMMA dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dictionary_list ::= dictionary_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dictionary_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dictionary_value ::= value COL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dictionary_value ::= LPAREN_CURLY RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dictionary_value ::= LPAREN_CURLY value COL value RPAREN_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // string ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list ::= LPAREN_SQ list RPAREN_SQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list ::= list delimitors simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // list ::= simple_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // delimitors ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // delimitors ::= CONCAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delimitors",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= integer_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // value ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // value ::= FLOATING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // value ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // value ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // value ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // value ::= negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operator_binary ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operator_binary ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operator_binary ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operator_binary ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operator_binary ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operator_binary ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operator_binary ::= comparison_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_binary",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_call ::= QUESTION simple_exp QUESTION IDENTIFIER LPAREN list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparison_parameters ::= comparison_parameters boolean_twoway_operators comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparison_parameters ::= comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_parameters",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // negative ::= MINUS INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // negative ::= MINUS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negative",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // integer_value ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comparison_operators ::= COM_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparison_operators ::= COM_NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comparison_operators ::= LPAREN_TRI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comparison_operators ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolean_operators ::= boolean_twoway_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_operators ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_twoway_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolean_twoway_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolean_twoway_operators ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // boolean_twoway_operators ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_twoway_operators",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // primitive_type ::= numeric_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // numeric_type ::= integer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // numeric_type ::= floating_point_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // integer_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // integer_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // floating_point_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // floating_point_type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("floating_point_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
